---
description:
globs: apps/api/*
alwaysApply: false
---
# Supabase API Configuration Rules

## Core Technologies

- **Database**: PostgreSQL with Supabase
- **Functions**: Deno Edge Functions
- **Migrations**: SQL migrations
- **Email**: Resend via Edge Functions
- **Storage**: Supabase Storage

## Project Structure

```
apps/api/
├── supabase/
│   ├── migrations/          # Database migrations
│   ├── functions/          # Edge functions
│   │   └── send-email/     # Email function
│   ├── schemas/            # Database schemas
│   │   ├── 00_extensions.sql
│   │   ├── 00_functions_pre.sql
│   │   ├── 00_types.sql
│   │   └── ...
│   ├── config.toml         # Supabase configuration
│   └── seed.sql           # Seed data
```

## Database Migration Patterns

### Migration File Naming

```
YYYYMMDDHHMMSS_descriptive_name.sql
Example: 20240901155537_initial.sql
```

### Migration Structure

```sql
-- migrations/20240901155538_users_and_teams.sql

-- Enable RLS on all tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.teams ENABLE ROW LEVEL SECURITY;

-- Users table
CREATE TABLE public.users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    email TEXT NOT NULL UNIQUE,
    full_name TEXT,
    avatar_url TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Teams table
CREATE TABLE public.teams (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE,
    created_by UUID REFERENCES public.users(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Team members junction table
CREATE TABLE public.team_members (
    team_id UUID REFERENCES public.teams(id) ON DELETE CASCADE,
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('owner', 'admin', 'member')),
    joined_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (team_id, user_id)
);

-- Indexes for performance
CREATE INDEX idx_team_members_user_id ON public.team_members(user_id);
CREATE INDEX idx_teams_slug ON public.teams(slug);

-- RLS Policies
CREATE POLICY "Users can view own profile"
ON public.users FOR SELECT
TO authenticated
USING ((SELECT auth.uid()) = id);

CREATE POLICY "Users can update own profile"
ON public.users FOR UPDATE
TO authenticated
USING ((SELECT auth.uid()) = id)
WITH CHECK ((SELECT auth.uid()) = id);
```

## Edge Functions Implementation

### Function Structure

```typescript
// functions/send-email/index.ts
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const RESEND_API_KEY = Deno.env.get("RESEND_API_KEY")!;
const SUPABASE_URL = Deno.env.get("SUPABASE_URL")!;
const SUPABASE_SERVICE_KEY = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;

interface EmailRequest {
  to: string;
  subject: string;
  template: string;
  data: Record<string, any>;
}

serve(async (req: Request) => {
  // CORS headers
  if (req.method === "OPTIONS") {
    return new Response("ok", {
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
      },
    });
  }

  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

    // Verify authentication
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) {
      throw new Error("Missing authorization header");
    }

    const { data: userData, error: authError } = await supabase.auth.getUser(
      authHeader.replace("Bearer ", "")
    );

    if (authError || !userData.user) {
      throw new Error("Unauthorized");
    }

    // Parse request
    const { to, subject, template, data }: EmailRequest = await req.json();

    // Send email via Resend
    const response = await fetch("https://api.resend.com/emails", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${RESEND_API_KEY}`,
      },
      body: JSON.stringify({
        from: "Proxed <noreply@proxed.com>",
        to,
        subject,
        html: renderTemplate(template, data),
      }),
    });

    if (!response.ok) {
      throw new Error("Failed to send email");
    }

    const result = await response.json();

    return new Response(JSON.stringify({ success: true, id: result.id }), {
      headers: { "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { "Content-Type": "application/json" },
        status: error.message === "Unauthorized" ? 401 : 500,
      }
    );
  }
});

function renderTemplate(template: string, data: Record<string, any>): string {
  // Template rendering logic
  const templates: Record<string, (data: any) => string> = {
    welcome: (data) => `
      <h1>Welcome to Proxed, ${data.name}!</h1>
      <p>We're excited to have you on board.</p>
    `,
    // More templates...
  };

  return templates[template]?.(data) || "";
}
```

### Function Configuration

```json
// functions/send-email/deno.json
{
  "tasks": {
    "dev": "deno run --allow-net --allow-env --watch index.ts"
  },
  "importMap": "./import_map.json"
}
```

## Database Schema Patterns

### Custom Types

```sql
-- schemas/00_types.sql

-- Enum types
CREATE TYPE user_role AS ENUM ('owner', 'admin', 'member');
CREATE TYPE project_status AS ENUM ('active', 'paused', 'archived');
CREATE TYPE notification_type AS ENUM ('email', 'in_app', 'webhook');

-- Composite types
CREATE TYPE address AS (
    street TEXT,
    city TEXT,
    state TEXT,
    country TEXT,
    postal_code TEXT
);
```

### Utility Functions

```sql
-- schemas/00_functions_pre.sql

-- Updated timestamp trigger
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to tables
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON public.users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();

-- Slug generation function
CREATE OR REPLACE FUNCTION generate_slug(name TEXT)
RETURNS TEXT AS $$
BEGIN
    RETURN LOWER(REGEXP_REPLACE(name, '[^a-zA-Z0-9]+', '-', 'g'));
END;
$$ LANGUAGE plpgsql;
```

### Storage Buckets

```sql
-- migrations/20241101133908_storage.sql

-- Create storage buckets
INSERT INTO storage.buckets (id, name, public)
VALUES
    ('avatars', 'avatars', true),
    ('project-assets', 'project-assets', false);

-- Storage policies
CREATE POLICY "Avatar images are publicly accessible"
ON storage.objects FOR SELECT
TO public
USING (bucket_id = 'avatars');

CREATE POLICY "Users can upload their own avatar"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
    bucket_id = 'avatars' AND
    (public.storage_foldername(name))[1] = (SELECT auth.uid()::text)
);

CREATE POLICY "Users can update their own avatar"
ON storage.objects FOR UPDATE
TO authenticated
USING (
    bucket_id = 'avatars' AND
    (public.storage_foldername(name))[1] = (SELECT auth.uid()::text)
);
```

## Supabase Configuration

```toml
# config.toml
[project]
id = "proxed"

[api]
enabled = true
port = 54321
schemas = ["public", "storage", "graphql_public"]
extra_search_path = ["public", "extensions"]
max_rows = 1000

[db]
pooler_enabled = false
port = 54322
shadow_port = 54320
major_version = 15

[studio]
enabled = true
port = 54323
api_url = "http://localhost"

[inbucket]
enabled = true
port = 54324

[storage]
enabled = true
file_size_limit = "50MiB"

[auth]
enabled = true
site_url = "http://localhost:3000"
additional_redirect_urls = ["http://localhost:3001"]

[auth.email]
enable_signup = true
double_confirm_changes = true
enable_confirmations = true

[auth.sms]
enable_signup = false
enable_confirmations = false

[auth.external.github]
enabled = true
client_id = "env(GITHUB_CLIENT_ID)"
secret = "env(GITHUB_CLIENT_SECRET)"
redirect_uri = "http://localhost:54321/auth/v1/callback"
```

## Seed Data

```sql
-- seed.sql

-- Only run in development
DO $$
BEGIN
  -- Check if we're in development
  IF current_database() != 'postgres' THEN
    RAISE EXCEPTION 'Seed data should only be run in development';
  END IF;
END $$;

-- Insert test users
INSERT INTO auth.users (id, email, encrypted_password, email_confirmed_at, created_at)
VALUES
  ('00000000-0000-0000-0000-000000000001', 'admin@example.com', crypt('password123', gen_salt('bf')), NOW(), NOW()),
  ('00000000-0000-0000-0000-000000000002', 'user@example.com', crypt('password123', gen_salt('bf')), NOW(), NOW());

-- Insert user profiles
INSERT INTO public.users (id, email, full_name)
VALUES
  ('00000000-0000-0000-0000-000000000001', 'admin@example.com', 'Admin User'),
  ('00000000-0000-0000-0000-000000000002', 'user@example.com', 'Test User');

-- Insert test team
INSERT INTO public.teams (id, name, slug, created_by)
VALUES
  ('00000000-0000-0000-0000-000000000010', 'Test Team', 'test-team', '00000000-0000-0000-0000-000000000001');

-- Insert team members
INSERT INTO public.team_members (team_id, user_id, role)
VALUES
  ('00000000-0000-0000-0000-000000000010', '00000000-0000-0000-0000-000000000001', 'owner'),
  ('00000000-0000-0000-0000-000000000010', '00000000-0000-0000-0000-000000000002', 'member');
```

## Best Practices

### Migration Guidelines

1. **Always enable RLS on tables**
2. **Create indexes for foreign keys and commonly queried columns**
3. **Use proper constraints (NOT NULL, UNIQUE, CHECK)**
4. **Add helpful comments to tables and columns**
5. **Test migrations with rollback scenarios**

### RLS Policy Patterns

```sql
-- Pattern 1: User owns resource
CREATE POLICY "Users can manage own resources"
ON public.user_settings
FOR ALL
TO authenticated
USING ((SELECT auth.uid()) = user_id)
WITH CHECK ((SELECT auth.uid()) = user_id);

-- Pattern 2: Team member access
CREATE POLICY "Team members can view team resources"
ON public.projects
FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.team_members
    WHERE team_members.team_id = projects.team_id
    AND team_members.user_id = (SELECT auth.uid())
  )
);

-- Pattern 3: Public read access
CREATE POLICY "Public profiles are viewable by everyone"
ON public.users
FOR SELECT
TO public
USING (is_public = true);
```

### Performance Optimization

```sql
-- Use partial indexes for filtered queries
CREATE INDEX idx_active_projects
ON public.projects(team_id)
WHERE status = 'active';

-- Use covering indexes for common queries
CREATE INDEX idx_team_members_lookup
ON public.team_members(user_id, team_id, role);

-- Use BRIN indexes for time-series data
CREATE INDEX idx_logs_created_at
ON public.logs USING BRIN(created_at);
```

## Common Pitfalls

❌ Don't forget to enable RLS on new tables
❌ Don't use SELECT * in RLS policies (performance issue)
❌ Don't create circular dependencies in foreign keys
❌ Don't forget to add indexes on foreign keys
❌ Don't hardcode environment-specific values in migrations
