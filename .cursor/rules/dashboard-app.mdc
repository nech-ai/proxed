---
description: Dashboard app - Next.js 15 with React 19, Supabase auth, and modern patterns
globs: ["apps/app/**/*"]
alwaysApply: false
---
# Dashboard App Implementation Rules

## Core Technologies

- **Framework**: Next.js 15 App Router  
- **UI**: React 19, Tailwind CSS, Shadcn UI
- **Database**: Supabase (Auth, Database, Storage)
- **State Management**: nuqs (URL state), Zustand (client state), Jotai (atoms)
- **Forms**: next-safe-action, react-hook-form, zod
- **Background Jobs**: Trigger.dev v3
- **Internationalization**: next-intl

## Project Structure

```
apps/app/
├── src/
│   ├── app/
│   │   ├── [locale]/
│   │   │   ├── (dashboard)/    # Authenticated routes
│   │   │   ├── (private)/      # Auth pages (login, signup)
│   │   │   └── layout.tsx      # Root layout with locale
│   │   └── api/                # API routes
│   ├── actions/                # Server actions
│   ├── components/             # React components
│   ├── hooks/                  # Custom hooks
│   ├── store/                  # Zustand stores
│   ├── utils/                  # Utilities
│   └── locales/               # i18n translations
└── jobs/                      # Trigger.dev tasks
```

## Authentication Implementation

### Middleware Setup (Next.js 15 Compatible)

```typescript
// middleware.ts
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'
import createMiddleware from 'next-intl/middleware'

const intlMiddleware = createMiddleware({
  locales: ['en'],
  defaultLocale: 'en',
  localePrefix: 'as-needed',
})

export async function middleware(request: NextRequest) {
  // Handle internationalization first
  const response = intlMiddleware(request)
  let supabaseResponse = NextResponse.next({
    request,
    headers: response.headers,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
            headers: response.headers,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // IMPORTANT: Always call getUser() to refresh session
  const { data: { user } } = await supabase.auth.getUser()

  // Protect dashboard routes
  const isDashboardRoute = request.nextUrl.pathname.includes('/(dashboard)')
  const isAuthRoute = request.nextUrl.pathname.includes('/(auth)')

  if (isDashboardRoute && !user) {
    const url = request.nextUrl.clone()
    url.pathname = '/auth/login'
    return NextResponse.redirect(url)
  }

  // Redirect authenticated users away from auth pages
  if (isAuthRoute && user) {
    const url = request.nextUrl.clone()
    url.pathname = '/dashboard'
    return NextResponse.redirect(url)
  }

  return supabaseResponse
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

### Server Component Auth Check

```typescript
// app/[locale]/(dashboard)/layout.tsx
import { createClient } from "@proxed/supabase/server";
import { redirect } from "next/navigation";
import { requireUser } from "@proxed/supabase/queries";

export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // Use helper function that throws if no user
  const user = await requireUser();

  return (
    <div className="min-h-screen bg-background">
      <DashboardHeader user={user} />
      <main className="container mx-auto py-6">
        {children}
      </main>
    </div>
  );
}
```

## Server Actions Pattern

### Action Client Setup

```typescript
// actions/safe-action.ts
import { createSafeActionClient } from "next-safe-action";
import { createClient } from "@proxed/supabase/server";
import { getUser } from "@proxed/supabase/cached-queries";

export const actionClient = createSafeActionClient({
  handleServerError: (e) => {
    console.error("Action error:", e);
    return e instanceof Error ? e.message : "An error occurred";
  },
});

export const authActionClient = actionClient
  .use(async ({ next }) => {
    const userData = await getUser();
    const user = userData?.data;
    const supabase = await createClient();

    if (!user) {
      throw new Error("Unauthorized");
    }

    return next({
      ctx: {
        supabase,
        user,
      },
    });
  });
```

### Action Implementation

```typescript
// actions/project-actions.ts
"use server";

import { z } from "zod";
import { revalidatePath } from "next/cache";
import { authActionClient } from "./safe-action";

const createProjectSchema = z.object({
  name: z.string().min(1).max(50),
  description: z.string().optional(),
  teamId: z.string().uuid(),
});

export const createProject = authActionClient
  .schema(createProjectSchema)
  .action(
    async ({
      parsedInput: { name, description, teamId },
      ctx: { user, supabase }
    }) => {
      // Verify team membership
      const { data: member } = await supabase
        .from("team_members")
        .select("role")
        .eq("team_id", teamId)
        .eq("user_id", user.id)
        .single();

      if (!member) {
        throw new Error("Not a member of this team");
      }

      // Create project
      const { data: project, error } = await supabase
        .from("projects")
        .insert({
          name,
          description,
          team_id: teamId,
          created_by: user.id,
        })
        .select()
        .single();

      if (error) {
        throw new Error(error.message);
      }

      revalidatePath(`/teams/${teamId}/projects`);

      return { project };
    }
  );
```

## URL State Management with nuqs

### Search Params Cache

```typescript
// utils/search-params.ts
import {
  createSearchParamsCache,
  parseAsInteger,
  parseAsString,
  parseAsStringEnum,
} from "nuqs/server";

export const projectsSearchParams = createSearchParamsCache({
  page: parseAsInteger.withDefault(1),
  perPage: parseAsInteger.withDefault(20),
  search: parseAsString,
  status: parseAsStringEnum(["active", "archived"]).withDefault("active"),
  sortBy: parseAsStringEnum(["name", "created_at"]).withDefault("created_at"),
  sortOrder: parseAsStringEnum(["asc", "desc"]).withDefault("desc"),
});
```

### Client Component Usage

```typescript
// components/projects/project-filters.tsx
'use client'

import { useQueryState } from 'nuqs'

export function ProjectFilters() {
  const [search, setSearch] = useQueryState('search', {
    shallow: false, // Triggers navigation
  })

  const [status, setStatus] = useQueryState('status', {
    defaultValue: 'active',
  })

  return (
    <div className="flex gap-4">
      <Input
        placeholder="Search projects..."
        value={search || ''}
        onChange={(e) => setSearch(e.target.value || null)}
      />
      <Select value={status} onValueChange={setStatus}>
        <SelectTrigger>
          <SelectValue />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="active">Active</SelectItem>
          <SelectItem value="archived">Archived</SelectItem>
        </SelectContent>
      </Select>
    </div>
  )
}
```

### Server Component Usage

```typescript
// app/[locale]/(dashboard)/projects/page.tsx
import { projectsSearchParams } from "@/utils/search-params";

export default async function ProjectsPage({
  searchParams,
}: {
  searchParams: unknown;
}) {
  const { page, perPage, search, status, sortBy, sortOrder } =
    projectsSearchParams.parse(searchParams);

  const projects = await getProjects({
    page,
    perPage,
    search,
    status,
    sortBy,
    sortOrder,
  });

  return (
    <div>
      <ProjectFilters />
      <ProjectsList projects={projects} />
    </div>
  );
}
```

## State Management Patterns

### Zustand Store Pattern

```typescript
// store/user/store.ts
import { create } from "zustand";
import { devtools, persist } from "zustand/middleware";
import { immer } from "zustand/middleware/immer";

interface UserStore {
  user: User | null;
  setUser: (user: User | null) => void;
  preferences: UserPreferences;
  updatePreferences: (preferences: Partial<UserPreferences>) => void;
  clearUser: () => void;
}

export const useUserStore = create<UserStore>()(
  devtools(
    persist(
      immer((set) => ({
        user: null,
        setUser: (user) => set((state) => {
          state.user = user;
        }),
        preferences: {
          theme: "light",
          notifications: true,
          timezone: "UTC",
        },
        updatePreferences: (preferences) => set((state) => {
          Object.assign(state.preferences, preferences);
        }),
        clearUser: () => set((state) => {
          state.user = null;
        }),
      })),
      {
        name: "user-storage",
        partialize: (state) => ({ preferences: state.preferences }),
      }
    ),
    { name: "user-store" }
  )
);
```

### Jotai Atoms for Fine-Grained State

```typescript
// store/atoms/project.ts
import { atom } from "jotai";
import { atomWithStorage } from "jotai/utils";

// Current selected project
export const currentProjectAtom = atom<Project | null>(null);

// Project filters
export const projectFiltersAtom = atomWithStorage("project-filters", {
  status: "active" as const,
  sortBy: "created_at" as const,
  sortOrder: "desc" as const,
});

// Derived atom for filtered projects
export const filteredProjectsAtom = atom((get) => {
  const projects = get(projectsAtom);
  const filters = get(projectFiltersAtom);
  
  return projects.filter(project => 
    filters.status === "all" || project.status === filters.status
  );
});

// Usage in components
function ProjectsList() {
  const [projects] = useAtom(filteredProjectsAtom);
  const [, setFilters] = useAtom(projectFiltersAtom);
  
  return (
    <div>
      <ProjectFilters onFiltersChange={setFilters} />
      {projects.map(project => <ProjectCard key={project.id} project={project} />)}
    </div>
  );
}
```

## React 19 Component Patterns

### Async Server Components with Error Handling

```typescript
// components/projects/projects-list.tsx
import { Suspense } from "react";
import { getProjects } from "@proxed/supabase/cached-queries";
import { ErrorBoundary } from "react-error-boundary";

async function ProjectsContent({ userId }: { userId: string }) {
  try {
    const projects = await getProjects(userId);

    if (!projects?.length) {
      return <EmptyState />;
    }

    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {projects.map((project) => (
          <ProjectCard key={project.id} project={project} />
        ))}
      </div>
    );
  } catch (error) {
    throw new Error(`Failed to load projects: ${error.message}`);
  }
}

export function ProjectsList({ userId }: { userId: string }) {
  return (
    <ErrorBoundary fallback={<ProjectsError />}>
      <Suspense fallback={<ProjectsSkeleton />}>
        <ProjectsContent userId={userId} />
      </Suspense>
    </ErrorBoundary>
  );
}
```

### Form Component with React 19 Features

```typescript
// components/projects/create-project-form.tsx
'use client'

import { useActionState } from "react";
import { useOptimistic } from "react";
import { createProject } from "@/actions/project-actions";
import { Button } from "@proxed/ui";

type FormState = {
  message?: string;
  errors?: Record<string, string[]>;
};

export function CreateProjectForm({ teamId }: { teamId: string }) {
  const [state, formAction, isPending] = useActionState<FormState, FormData>(
    async (prevState, formData) => {
      const result = await createProject(formData);
      
      if (result?.serverError) {
        return { message: result.serverError };
      }
      
      if (result?.validationErrors) {
        return { errors: result.validationErrors };
      }
      
      return { message: "Project created successfully!" };
    },
    {}
  );

  const [optimisticProjects, addOptimisticProject] = useOptimistic(
    [],
    (state, newProject: Partial<Project>) => [...state, newProject]
  );

  const handleSubmit = (formData: FormData) => {
    // Optimistically add project
    addOptimisticProject({
      id: crypto.randomUUID(),
      name: formData.get("name") as string,
      status: "active",
    });
    
    formAction(formData);
  };

  return (
    <form action={handleSubmit} className="space-y-4">
      <input type="hidden" name="teamId" value={teamId} />
      
      <div>
        <label htmlFor="name" className="block text-sm font-medium">
          Project Name
        </label>
        <input
          id="name"
          name="name"
          type="text"
          required
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
          aria-describedby={state.errors?.name ? "name-error" : undefined}
        />
        {state.errors?.name && (
          <p id="name-error" className="mt-1 text-sm text-red-600">
            {state.errors.name[0]}
          </p>
        )}
      </div>

      <div>
        <label htmlFor="description" className="block text-sm font-medium">
          Description
        </label>
        <textarea
          id="description"
          name="description"
          rows={3}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
        />
      </div>

      <Button type="submit" disabled={isPending}>
        {isPending ? "Creating..." : "Create Project"}
      </Button>

      {state.message && (
        <p className={`text-sm ${state.errors ? "text-red-600" : "text-green-600"}`}>
          {state.message}
        </p>
      )}
    </form>
  );
}
```

### Real-time Data with use() Hook

```typescript
// components/projects/project-stats.tsx
'use client'

import { use, Suspense } from "react";
import { getProjectStats } from "@proxed/supabase/queries";

function ProjectStatsContent({ projectId }: { projectId: string }) {
  // React 19 use() hook for async data
  const stats = use(getProjectStats(projectId));

  return (
    <div className="grid grid-cols-3 gap-4">
      <div className="text-center">
        <div className="text-2xl font-bold">{stats.totalRequests}</div>
        <div className="text-sm text-muted-foreground">Total Requests</div>
      </div>
      <div className="text-center">
        <div className="text-2xl font-bold">{stats.avgLatency}ms</div>
        <div className="text-sm text-muted-foreground">Avg Latency</div>
      </div>
      <div className="text-center">
        <div className="text-2xl font-bold">{stats.errorRate}%</div>
        <div className="text-sm text-muted-foreground">Error Rate</div>
      </div>
    </div>
  );
}

export function ProjectStats({ projectId }: { projectId: string }) {
  return (
    <Suspense fallback={<StatsSkeleton />}>
      <ProjectStatsContent projectId={projectId} />
    </Suspense>
  );
}
```

### Form Component with Server Action

```typescript
// components/projects/create-project-form.tsx
'use client'

import { useAction } from "next-safe-action/hooks";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { createProject } from "@/actions/project-actions";
import { toast } from "sonner";

export function CreateProjectForm({ teamId }: { teamId: string }) {
  const { execute, isExecuting } = useAction(createProject, {
    onSuccess: ({ data }) => {
      toast.success("Project created successfully");
      router.push(`/projects/${data.project.id}`);
    },
    onError: ({ error }) => {
      toast.error(error.serverError || "Failed to create project");
    },
  });

  const form = useForm<CreateProjectInput>({
    resolver: zodResolver(createProjectSchema),
    defaultValues: {
      teamId,
    },
  });

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(execute)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Project Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit" disabled={isExecuting}>
          {isExecuting ? "Creating..." : "Create Project"}
        </Button>
      </form>
    </Form>
  );
}
```

## Trigger.dev Background Jobs

```typescript
// jobs/notifications.ts
import { task } from "@trigger.dev/sdk/v3";
import { createAdminClient } from "@proxed/supabase/server";
import { sendEmail } from "@proxed/mail";

export const sendProjectNotification = task({
  id: "send-project-notification",
  run: async (payload: { projectId: string; type: string }) => {
    const supabase = createAdminClient();

    // Get project and team members
    const { data: project } = await supabase
      .from("projects")
      .select("*, team:teams!inner(*, members:team_members!inner(user:users!inner(*)))")
      .eq("id", payload.projectId)
      .single();

    if (!project) {
      throw new Error("Project not found");
    }

    // Send emails to team members
    const emails = project.team.members.map((member) => ({
      to: member.user.email,
      subject: `Project Update: ${project.name}`,
      template: "project-notification",
      data: {
        projectName: project.name,
        type: payload.type,
      },
    }));

    await Promise.all(emails.map(sendEmail));
  },
});
```

## Internationalization

```typescript
// locales/en.ts
export default {
  common: {
    save: "Save",
    cancel: "Cancel",
    delete: "Delete",
    loading: "Loading...",
  },
  projects: {
    title: "Projects",
    create: "Create Project",
    empty: "No projects found",
    fields: {
      name: "Project Name",
      description: "Description",
    },
  },
} as const;

// Usage in components
import { useTranslations } from 'next-intl';

export function ProjectsPage() {
  const t = useTranslations('projects');

  return (
    <div>
      <h1>{t('title')}</h1>
      <Button>{t('create')}</Button>
    </div>
  );
}
```

## Common Patterns

### Error Boundaries

```typescript
// components/error-boundary.tsx
'use client'

export default function ErrorBoundary({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-lg font-semibold">Something went wrong!</h2>
      <p className="text-muted-foreground">{error.message}</p>
      <Button onClick={reset} className="mt-4">
        Try again
      </Button>
    </div>
  )
}
```

### Loading States

```typescript
// components/loading-skeleton.tsx
export function ProjectsSkeleton() {
  return (
    <div className="space-y-4">
      {Array.from({ length: 5 }).map((_, i) => (
        <div key={i} className="rounded-lg border p-4">
          <Skeleton className="h-6 w-1/3 mb-2" />
          <Skeleton className="h-4 w-2/3" />
        </div>
      ))}
    </div>
  );
}
```

## React 19 & Next.js 15 Best Practices

### Performance Optimizations

1. **Default to React Server Components** - Only use 'use client' when necessary
2. **Leverage React 19 compiler** - Automatic memoization and optimization
3. **Use Next.js 15 caching** - Aggressive caching with granular invalidation
4. **Implement concurrent features** - useActionState, useOptimistic for better UX
5. **Optimize bundle with Turbopack** - Faster builds and hot reloading
6. **Use streaming with Suspense** - Progressive loading for better perceived performance

```typescript
// Concurrent rendering example
'use client'

import { useOptimistic, useActionState, startTransition } from "react";

export function OptimisticProjectList({ projects }: { projects: Project[] }) {
  const [optimisticProjects, addOptimisticProject] = useOptimistic(
    projects,
    (state, newProject: Project) => [...state, newProject]
  );

  const [, formAction, isPending] = useActionState(createProjectAction, null);

  const handleCreate = (formData: FormData) => {
    startTransition(() => {
      addOptimisticProject({
        id: crypto.randomUUID(),
        name: formData.get("name") as string,
        status: "active",
      });
    });
    formAction(formData);
  };

  return (
    <div>
      {optimisticProjects.map(project => (
        <ProjectCard key={project.id} project={project} />
      ))}
      <CreateProjectForm action={handleCreate} isPending={isPending} />
    </div>
  );
}
```

### Modern State Management

```typescript
// Combine Zustand with React 19 features
import { create } from "zustand";
import { subscribeWithSelector } from "zustand/middleware";

export const useAppStore = create(
  subscribeWithSelector<AppState>((set, get) => ({
    projects: [],
    setProjects: (projects) => set({ projects }),
    optimisticAdd: (project) => set((state) => ({
      projects: [...state.projects, project]
    })),
  }))
);

// React 19 concurrent features integration
function ProjectManager() {
  const projects = useAppStore(state => state.projects);
  const [optimisticProjects, addOptimistic] = useOptimistic(projects);
  
  // Sync Zustand with React 19 optimistic updates
  useEffect(() => {
    return useAppStore.subscribe(
      (state) => state.projects,
      (projects) => {
        // Only sync if not in optimistic state
        if (!isPending) {
          setProjects(projects);
        }
      }
    );
  }, [isPending]);
}
```

### Security Best Practices

1. **Server Actions Security** - Always validate permissions and sanitize inputs
2. **Row Level Security** - Enforce database-level security with RLS
3. **Type-safe forms** - Use Zod schemas for validation
4. **CSRF Protection** - Built into Next.js server actions
5. **Environment Security** - Never expose secrets to client

```typescript
// Secure server action pattern
import { z } from "zod";
import { requireUser } from "@proxed/supabase/queries";

const createProjectSchema = z.object({
  name: z.string().min(1).max(100),
  teamId: z.string().uuid(),
});

export async function createProjectAction(formData: FormData) {
  // 1. Authenticate user
  const user = await requireUser();
  
  // 2. Validate input
  const result = createProjectSchema.safeParse({
    name: formData.get("name"),
    teamId: formData.get("teamId"),
  });
  
  if (!result.success) {
    return { errors: result.error.flatten().fieldErrors };
  }
  
  // 3. Authorize user for team
  const hasAccess = await verifyTeamAccess(user.id, result.data.teamId);
  if (!hasAccess) {
    throw new Error("Unauthorized");
  }
  
  // 4. Perform operation with RLS
  const project = await createProject(result.data);
  
  // 5. Revalidate cache
  revalidatePath(`/teams/${result.data.teamId}`);
  
  return { data: project };
}
```

### Required Patterns

#### ✅ Always Do
- Use React Server Components by default
- Implement proper error boundaries with ErrorBoundary
- Use React 19 hooks (useActionState, useOptimistic) for better UX
- Validate all inputs with Zod schemas
- Use Suspense boundaries for loading states
- Cache database queries appropriately
- Use TypeScript for type safety
- Implement proper RLS policies

#### ❌ Never Do
- Use 'use client' unnecessarily
- Fetch data in client components without proper error handling
- Store sensitive data in client-side state
- Skip input validation in server actions
- Forget to handle loading and error states
- Use deprecated React patterns (useEffect for data fetching)
- Ignore accessibility requirements
- Skip cache revalidation after mutations

### Testing Patterns

```typescript
// Testing server actions
import { describe, it, expect, beforeEach } from "bun:test";
import { createProjectAction } from "@/actions/project-actions";

describe("createProjectAction", () => {
  beforeEach(() => {
    // Setup test user and team
  });

  it("should create project with valid input", async () => {
    const formData = new FormData();
    formData.set("name", "Test Project");
    formData.set("teamId", "valid-team-id");

    const result = await createProjectAction(formData);
    
    expect(result.data).toBeDefined();
    expect(result.data.name).toBe("Test Project");
  });

  it("should return errors for invalid input", async () => {
    const formData = new FormData();
    formData.set("name", ""); // Invalid empty name

    const result = await createProjectAction(formData);
    
    expect(result.errors).toBeDefined();
    expect(result.errors.name).toContain("Required");
  });
});
```

### Deployment Considerations

1. **Edge Runtime** - Use for lightweight operations
2. **Streaming** - Enable for better perceived performance
3. **Caching Strategy** - Configure appropriate cache headers
4. **Monitoring** - Add performance monitoring and error tracking

```typescript
// Edge runtime configuration
export const runtime = 'edge';
export const dynamic = 'force-dynamic';

// Streaming configuration
export default function StreamingPage() {
  return (
    <Suspense fallback={<GlobalLoading />}>
      <StreamingContent />
    </Suspense>
  );
}
```
