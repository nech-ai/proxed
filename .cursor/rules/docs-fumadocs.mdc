---
description:
globs: apps/docs/*
alwaysApply: false
---
# Fumadocs Documentation App Rules

## Core Technologies

- **Framework**: Next.js 15 with Fumadocs
- **Content**: MDX files
- **Search**: Algolia or Orama Cloud
- **UI**: Tailwind CSS, Fumadocs UI
- **Code Highlighting**: Shiki

## Project Structure

```
apps/docs/
├── app/
│   ├── (docs)/
│   │   ├── [[...slug]]/    # Dynamic documentation routes
│   │   └── layout.tsx      # Docs layout
│   ├── api/
│   │   └── search/         # Search API endpoints
│   ├── layout.config.tsx   # Fumadocs layout config
│   └── layout.tsx         # Root layout
├── content/
│   └── docs/              # MDX documentation files
│       ├── api-reference/
│       ├── guides/
│       └── index.mdx      # Getting started
├── lib/
│   ├── source.ts          # Content source configuration
│   └── metadata.ts        # Metadata utilities
└── scripts/
    └── sync-algolia.mjs   # Search indexing
```

## Fumadocs Configuration

### Content Source Setup

```typescript
// lib/source.ts
import { createMDXSource } from 'fumadocs-mdx';
import { loader } from 'fumadocs-core/source';
import { createOpenAPI } from 'fumadocs-openapi/server';

export const { getPage, getPages, pageTree } = loader({
  baseUrl: '/',
  rootDir: 'docs',
  source: createMDXSource(map),
  icon(page) {
    if (page.file.dirname === 'api-reference') return 'lucide:code';
    if (page.file.dirname === 'guides') return 'lucide:book-open';
    return 'lucide:file-text';
  },
});

// OpenAPI integration
export const openapi = createOpenAPI({
  documentOrUrl: '/openapi.json',
});
```

### Layout Configuration

```typescript
// app/layout.config.tsx
import { type HomeLayoutProps } from 'fumadocs-ui/home-layout';
import { type DocsLayoutProps } from 'fumadocs-ui/layout';

export const homeLayoutConfig: HomeLayoutProps = {
  nav: {
    title: 'Proxed Docs',
    transparentMode: 'top',
  },
  links: [
    {
      text: 'Documentation',
      url: '/docs',
    },
    {
      text: 'API Reference',
      url: '/docs/api-reference',
    },
  ],
  githubUrl: 'https://github.com/proxed/proxed',
};

export const docsLayoutConfig: DocsLayoutProps = {
  tree: pageTree,
  nav: {
    title: 'Proxed Docs',
    transparentMode: 'none',
  },
  sidebar: {
    defaultOpenLevel: 1,
    banner: (
      <div className="rounded-lg border bg-card p-3 text-sm">
        <p className="font-medium">🚀 New in v2.0</p>
        <p className="text-muted-foreground">Check out our new features!</p>
      </div>
    ),
  },
  links: [
    {
      text: 'GitHub',
      url: 'https://github.com/proxed/proxed',
      icon: 'lucide:github',
    },
  ],
};
```

## MDX Content Structure

### Frontmatter Schema

```yaml
---
title: "Page Title"
description: "Page description for SEO"
icon: "lucide:icon-name"
mode: "doc" # or "api"
---
```

### Documentation Page Example

```mdx
---
title: "Getting Started"
description: "Learn how to get started with Proxed"
---

import { Callout, Card, Cards } from 'fumadocs-ui/components/callout';
import { Tab, Tabs } from 'fumadocs-ui/components/tabs';
import { Steps, Step } from 'fumadocs-ui/components/steps';
import { CodeBlock } from 'fumadocs-ui/components/codeblock';

# Getting Started

Welcome to Proxed! This guide will help you get up and running quickly.

<Callout type="info">
  Make sure you have Node.js 18+ installed before proceeding.
</Callout>

## Installation

<Tabs items={['npm', 'yarn', 'pnpm', 'bun']}>
  <Tab value="npm">
    ```bash
    npm install @proxed/sdk
    ```
  </Tab>
  <Tab value="yarn">
    ```bash
    yarn add @proxed/sdk
    ```
  </Tab>
  <Tab value="pnpm">
    ```bash
    pnpm add @proxed/sdk
    ```
  </Tab>
  <Tab value="bun">
    ```bash
    bun add @proxed/sdk
    ```
  </Tab>
</Tabs>

## Quick Start

<Steps>
  <Step>
    ### Create an account

    Sign up for a free account at [proxed.com](mdc:https:/proxed.com).
  </Step>

  <Step>
    ### Get your API key

    Navigate to the dashboard and create a new API key.
  </Step>

  <Step>
    ### Initialize the SDK

    <CodeBlock lang="typescript">
      ```typescript
      import { Proxed } from '@proxed/sdk';

      const proxed = new Proxed({
        apiKey: 'your-api-key',
      });
      ```
    </CodeBlock>
  </Step>
</Steps>

## Next Steps

<Cards>
  <Card title="API Reference" href="/docs/api-reference">
    Explore the complete API documentation
  </Card>
  <Card title="Examples" href="/docs/examples">
    Check out code examples and tutorials
  </Card>
  <Card title="Guides" href="/docs/guides">
    Learn best practices and advanced features
  </Card>
</Cards>
```

### API Reference Page

```mdx
---
title: "Chat Completions"
description: "Create chat completions using AI models"
mode: "api"
---

import { APIExample } from 'fumadocs-ui/components/api';

# Chat Completions

Create a chat completion with the specified messages and model.

<APIExample
  method="POST"
  endpoint="/v1/chat/completions"
>

## Request

```json
{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant."
    },
    {
      "role": "user",
      "content": "Hello!"
    }
  ],
  "temperature": 0.7,
  "max_tokens": 1000
}
```

## Response

```json
{
  "id": "chatcmpl-123",
  "object": "chat.completion",
  "created": 1677652288,
  "model": "gpt-4",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "Hello! How can I help you today?"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 9,
    "completion_tokens": 12,
    "total_tokens": 21
  }
}
```

</APIExample>

## Parameters

| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| `model` | string | Yes | ID of the model to use |
| `messages` | array | Yes | Messages to generate completion for |
| `temperature` | number | No | Sampling temperature (0-2) |
| `max_tokens` | integer | No | Maximum tokens to generate |

## Code Examples

<Tabs items={['JavaScript', 'Python', 'cURL']}>
  <Tab value="JavaScript">
    ```javascript
    const response = await proxed.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "user", content: "Hello!" }
      ],
    });

    console.log(response.choices[0].message.content);
    ```
  </Tab>
  <Tab value="Python">
    ```python
    response = proxed.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "user", "content": "Hello!"}
        ]
    )

    print(response.choices[0].message.content)
    ```
  </Tab>
  <Tab value="cURL">
    ```bash
    curl -X POST https://api.proxed.com/v1/chat/completions \
      -H "Authorization: Bearer YOUR_API_KEY" \
      -H "Content-Type: application/json" \
      -d '{
        "model": "gpt-4",
        "messages": [{"role": "user", "content": "Hello!"}]
      }'
    ```
  </Tab>
</Tabs>
```

## Search Implementation

### Algolia Configuration

```javascript
// scripts/sync-algolia.mjs
import { getPages } from '../lib/source.js';
import algoliasearch from 'algoliasearch';

const client = algoliasearch(
  process.env.NEXT_PUBLIC_ALGOLIA_APP_ID,
  process.env.ALGOLIA_ADMIN_KEY
);

const index = client.initIndex('docs');

async function syncAlgolia() {
  const pages = await getPages();

  const objects = pages.map((page) => ({
    objectID: page.url,
    title: page.data.title,
    description: page.data.description,
    content: page.data.structuredData?.content || '',
    url: page.url,
    hierarchy: {
      lvl0: page.data.section || 'Documentation',
      lvl1: page.data.title,
    },
  }));

  await index.saveObjects(objects);
  console.log(`Synced ${objects.length} pages to Algolia`);
}

syncAlgolia();
```

### Search API Route

```typescript
// app/api/search/route.ts
import { createSearchAPI } from 'fumadocs-core/search/server';
import { getPages } from '@/lib/source';

export const { GET } = createSearchAPI('advanced', {
  indexes: [
    {
      source: getPages,
      fields: ['title', 'description', 'content'],
    },
  ],
  tag: 'docs-search',
});
```

## Component Customization

### Custom Code Block

```typescript
// components/code-block.tsx
'use client'

import { CodeBlock as FumaCodeBlock } from 'fumadocs-ui/components/codeblock';
import { Copy, Check } from 'lucide-react';
import { useState } from 'react';

export function CodeBlock({
  children,
  lang,
  title
}: {
  children: string;
  lang?: string;
  title?: string;
}) {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    await navigator.clipboard.writeText(children);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <div className="relative group">
      {title && (
        <div className="px-4 py-2 border-b text-sm text-muted-foreground">
          {title}
        </div>
      )}
      <FumaCodeBlock lang={lang}>
        {children}
      </FumaCodeBlock>
      <button
        onClick={handleCopy}
        className="absolute top-2 right-2 p-2 rounded-md opacity-0 group-hover:opacity-100 transition-opacity"
      >
        {copied ? <Check size={16} /> : <Copy size={16} />}
      </button>
    </div>
  );
}
```

### Custom Callout

```typescript
// components/callout.tsx
import { AlertCircle, Info, AlertTriangle, XCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

const icons = {
  info: Info,
  warning: AlertTriangle,
  error: XCircle,
  default: AlertCircle,
};

const styles = {
  info: 'border-blue-500/20 bg-blue-500/10 text-blue-900 dark:text-blue-100',
  warning: 'border-yellow-500/20 bg-yellow-500/10 text-yellow-900 dark:text-yellow-100',
  error: 'border-red-500/20 bg-red-500/10 text-red-900 dark:text-red-100',
  default: 'border-border bg-card',
};

export function Callout({
  type = 'default',
  title,
  children,
}: {
  type?: 'info' | 'warning' | 'error' | 'default';
  title?: string;
  children: React.ReactNode;
}) {
  const Icon = icons[type];

  return (
    <div className={cn('rounded-lg border p-4 my-4', styles[type])}>
      <div className="flex gap-2">
        <Icon className="h-5 w-5 flex-shrink-0 mt-0.5" />
        <div className="flex-1">
          {title && <p className="font-semibold mb-1">{title}</p>}
          <div className="prose-sm">{children}</div>
        </div>
      </div>
    </div>
  );
}
```

## OpenAPI Integration

```typescript
// app/(docs)/api-reference/[[...slug]]/page.tsx
import { openapi } from '@/lib/source';
import { APIPage } from 'fumadocs-openapi/ui';

export default async function Page({
  params,
}: {
  params: { slug?: string[] };
}) {
  const page = openapi.getPage({ slug: params.slug });

  if (!page) {
    notFound();
  }

  const { title, description, method, route } = page;

  return (
    <APIPage
      page={page}
      breadcrumb={{
        enabled: true,
      }}
      heading={{
        enabled: true,
        title,
        description,
      }}
      apiReference={{
        method,
        route,
      }}
    />
  );
}
```

## SEO Optimization

```typescript
// app/(docs)/[[...slug]]/page.tsx
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const page = getPage({ slug: params.slug });

  if (!page) return {};

  return {
    title: page.data.title,
    description: page.data.description,
    openGraph: {
      title: page.data.title,
      description: page.data.description,
      type: 'article',
      images: page.data.image ? [page.data.image] : undefined,
    },
  };
}

export function generateStaticParams() {
  return getPages().map((page) => ({
    slug: page.slugs,
  }));
}
```

## Best Practices

1. **Keep MDX files organized in logical folders**
2. **Use consistent frontmatter across all pages**
3. **Implement search for better discoverability**
4. **Add code examples in multiple languages**
5. **Use interactive components for complex concepts**
6. **Keep navigation structure shallow (max 3 levels)**

## Common Pitfalls

❌ Don't forget to run search indexing after content changes
❌ Don't use client components in MDX unless necessary
❌ Don't skip alt text for images
❌ Don't forget to update the sitemap
❌ Don't use absolute URLs for internal links
