---
description:
globs: packages/mail/*
alwaysApply: false
---
# Mail Package Implementation Rules

## Overview

The mail package provides email sending functionality with React Email templates and multiple providers (Resend, console for development).

## Core Technologies

- **Email Templates**: React Email
- **Email Provider**: Resend (production), Console (development)
- **Template Engine**: React/JSX
- **Styling**: Inline styles with React Email components

## Project Structure

```
packages/mail/
├── src/
│   ├── emails/
│   │   ├── components/      # Reusable email components
│   │   │   ├── Button.tsx
│   │   │   ├── Footer.tsx
│   │   │   ├── Header.tsx
│   │   │   └── Layout.tsx
│   │   ├── ExecutionError.tsx
│   │   ├── Feedback.tsx
│   │   ├── ForgotPassword.tsx
│   │   ├── InviteUser.tsx
│   │   └── Welcome.tsx
│   ├── provider/
│   │   ├── index.ts         # Provider interface
│   │   ├── console.ts       # Console provider (dev)
│   │   └── resend.ts        # Resend provider (prod)
│   ├── util/
│   │   ├── send.ts          # Send utility
│   │   └── templates.ts     # Template registry
│   └── index.ts            # Main exports
```

## Email Template Implementation

### Base Layout Component

```typescript
// emails/components/Layout.tsx
import {
  Body,
  Container,
  Head,
  Html,
  Preview,
  Tailwind,
} from "@react-email/components";
import { Header } from "./Header";
import { Footer } from "./Footer";

interface LayoutProps {
  preview: string;
  children: React.ReactNode;
}

export function Layout({ preview, children }: LayoutProps) {
  return (
    <Html>
      <Head />
      <Preview>{preview}</Preview>
      <Tailwind>
        <Body className="bg-gray-50 font-sans">
          <Container className="mx-auto py-10 px-6 max-w-xl">
            <div className="bg-white rounded-lg shadow-sm border border-gray-200">
              <Header />
              <div className="px-8 py-6">
                {children}
              </div>
              <Footer />
            </div>
          </Container>
        </Body>
      </Tailwind>
    </Html>
  );
}
```

### Email Component Pattern

```typescript
// emails/Welcome.tsx
import {
  Button,
  Heading,
  Hr,
  Link,
  Section,
  Text,
} from "@react-email/components";
import { Layout } from "./components/Layout";

interface WelcomeEmailProps {
  name: string;
  confirmUrl: string;
}

export function WelcomeEmail({ name, confirmUrl }: WelcomeEmailProps) {
  return (
    <Layout preview={`Welcome to Proxed, ${name}!`}>
      <Heading className="text-2xl font-bold text-gray-900 mb-4">
        Welcome to Proxed, {name}!
      </Heading>

      <Text className="text-gray-600 mb-6">
        Thanks for signing up. We're excited to have you on board.
        Please confirm your email address to get started.
      </Text>

      <Section className="text-center mb-6">
        <Button
          href={confirmUrl}
          className="bg-blue-600 text-white px-6 py-3 rounded-md font-medium"
        >
          Confirm Email Address
        </Button>
      </Section>

      <Hr className="border-gray-200 my-6" />

      <Text className="text-sm text-gray-500">
        If you didn't create an account, you can safely ignore this email.
        This link will expire in 24 hours.
      </Text>

      <Text className="text-sm text-gray-500 mt-4">
        Or copy and paste this URL into your browser:{" "}
        <Link href={confirmUrl} className="text-blue-600 underline">
          {confirmUrl}
        </Link>
      </Text>
    </Layout>
  );
}

// Default props for preview
WelcomeEmail.PreviewProps = {
  name: "John Doe",
  confirmUrl: "https://proxed.com/confirm?token=abc123",
} as WelcomeEmailProps;
```

### Reusable Components

```typescript
// emails/components/Button.tsx
import { Button as EmailButton } from "@react-email/components";
import { CSSProperties } from "react";

interface ButtonProps {
  href: string;
  children: React.ReactNode;
  variant?: "primary" | "secondary";
  fullWidth?: boolean;
}

const styles: Record<string, CSSProperties> = {
  primary: {
    backgroundColor: "#2563eb",
    color: "#ffffff",
    padding: "12px 24px",
    borderRadius: "6px",
    fontWeight: "500",
    textDecoration: "none",
    display: "inline-block",
  },
  secondary: {
    backgroundColor: "#f3f4f6",
    color: "#374151",
    padding: "12px 24px",
    borderRadius: "6px",
    fontWeight: "500",
    textDecoration: "none",
    display: "inline-block",
  },
};

export function Button({
  href,
  children,
  variant = "primary",
  fullWidth = false
}: ButtonProps) {
  return (
    <EmailButton
      href={href}
      style={{
        ...styles[variant],
        width: fullWidth ? "100%" : "auto",
        textAlign: "center",
      }}
    >
      {children}
    </EmailButton>
  );
}
```

## Provider Implementation

### Provider Interface

```typescript
// provider/index.ts
export interface EmailProvider {
  send(options: SendEmailOptions): Promise<SendEmailResult>;
}

export interface SendEmailOptions {
  to: string | string[];
  from?: string;
  subject: string;
  html: string;
  text?: string;
  replyTo?: string;
  cc?: string | string[];
  bcc?: string | string[];
  attachments?: Attachment[];
}

export interface SendEmailResult {
  id: string;
  success: boolean;
  error?: string;
}

export interface Attachment {
  filename: string;
  content: Buffer | string;
  contentType?: string;
}
```

### Resend Provider

```typescript
// provider/resend.ts
import { Resend } from "resend";
import type { EmailProvider, SendEmailOptions, SendEmailResult } from "./index";

export class ResendProvider implements EmailProvider {
  private client: Resend;
  private defaultFrom: string;

  constructor(apiKey: string, defaultFrom: string = "Proxed <noreply@proxed.com>") {
    this.client = new Resend(apiKey);
    this.defaultFrom = defaultFrom;
  }

  async send(options: SendEmailOptions): Promise<SendEmailResult> {
    try {
      const { data, error } = await this.client.emails.send({
        from: options.from || this.defaultFrom,
        to: Array.isArray(options.to) ? options.to : [options.to],
        subject: options.subject,
        html: options.html,
        text: options.text,
        reply_to: options.replyTo,
        cc: options.cc,
        bcc: options.bcc,
        attachments: options.attachments?.map(att => ({
          filename: att.filename,
          content: att.content,
          content_type: att.contentType,
        })),
      });

      if (error) {
        return {
          id: "",
          success: false,
          error: error.message,
        };
      }

      return {
        id: data?.id || "",
        success: true,
      };
    } catch (error) {
      return {
        id: "",
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      };
    }
  }
}
```

### Console Provider (Development)

```typescript
// provider/console.ts
import type { EmailProvider, SendEmailOptions, SendEmailResult } from "./index";

export class ConsoleProvider implements EmailProvider {
  async send(options: SendEmailOptions): Promise<SendEmailResult> {
    console.log("📧 Email Preview:");
    console.log("================");
    console.log(`To: ${Array.isArray(options.to) ? options.to.join(", ") : options.to}`);
    console.log(`From: ${options.from || "default@example.com"}`);
    console.log(`Subject: ${options.subject}`);

    if (options.cc) {
      console.log(`CC: ${Array.isArray(options.cc) ? options.cc.join(", ") : options.cc}`);
    }

    console.log("\nHTML Preview:");
    console.log("-------------");
    // Extract text content for console preview
    const textPreview = options.html
      .replace(/<[^>]*>/g, "")
      .replace(/\s+/g, " ")
      .trim()
      .substring(0, 200);
    console.log(textPreview + "...");

    console.log("\nFull HTML saved to: .dev/emails/", Date.now(), ".html");
    console.log("================\n");

    // Save HTML to file in development
    if (process.env.NODE_ENV === "development") {
      const fs = await import("fs/promises");
      const path = await import("path");

      const dir = path.join(process.cwd(), ".dev/emails");
      await fs.mkdir(dir, { recursive: true });

      const filename = `${Date.now()}-${options.subject.replace(/[^a-z0-9]/gi, "-")}.html`;
      await fs.writeFile(path.join(dir, filename), options.html);
    }

    return {
      id: `console-${Date.now()}`,
      success: true,
    };
  }
}
```

## Template Registry

```typescript
// util/templates.ts
import { render } from "@react-email/render";
import { WelcomeEmail } from "../emails/Welcome";
import { ForgotPasswordEmail } from "../emails/ForgotPassword";
import { InviteUserEmail } from "../emails/InviteUser";
import { ExecutionErrorEmail } from "../emails/ExecutionError";
import { FeedbackEmail } from "../emails/Feedback";

export type EmailTemplate =
  | "welcome"
  | "forgot-password"
  | "invite-user"
  | "execution-error"
  | "feedback";

export interface TemplateData {
  welcome: {
    name: string;
    confirmUrl: string;
  };
  "forgot-password": {
    name: string;
    resetUrl: string;
  };
  "invite-user": {
    inviterName: string;
    teamName: string;
    inviteUrl: string;
  };
  "execution-error": {
    projectName: string;
    errorMessage: string;
    executionId: string;
    dashboardUrl: string;
  };
  feedback: {
    userEmail: string;
    message: string;
    rating?: number;
  };
}

export async function renderTemplate<T extends EmailTemplate>(
  template: T,
  data: TemplateData[T]
): Promise<{ html: string; text: string; subject: string }> {
  let component: React.ReactElement;
  let subject: string;

  switch (template) {
    case "welcome":
      component = <WelcomeEmail {...data as TemplateData["welcome"]} />;
      subject = "Welcome to Proxed";
      break;

    case "forgot-password":
      component = <ForgotPasswordEmail {...data as TemplateData["forgot-password"]} />;
      subject = "Reset your password";
      break;

    case "invite-user":
      const inviteData = data as TemplateData["invite-user"];
      component = <InviteUserEmail {...inviteData} />;
      subject = `${inviteData.inviterName} invited you to join ${inviteData.teamName}`;
      break;

    case "execution-error":
      const errorData = data as TemplateData["execution-error"];
      component = <ExecutionErrorEmail {...errorData} />;
      subject = `Error in ${errorData.projectName}`;
      break;

    case "feedback":
      component = <FeedbackEmail {...data as TemplateData["feedback"]} />;
      subject = "New feedback received";
      break;

    default:
      throw new Error(`Unknown template: ${template}`);
  }

  const html = await render(component);
  const text = await render(component, { plainText: true });

  return { html, text, subject };
}
```

## Send Utility

```typescript
// util/send.ts
import { EmailProvider } from "../provider";
import { renderTemplate, EmailTemplate, TemplateData } from "./templates";

export interface SendOptions<T extends EmailTemplate> {
  to: string | string[];
  template: T;
  data: TemplateData[T];
  subject?: string; // Override template subject
  from?: string;
  replyTo?: string;
  cc?: string | string[];
  bcc?: string | string[];
}

export class Mailer {
  constructor(private provider: EmailProvider) {}

  async send<T extends EmailTemplate>(options: SendOptions<T>) {
    const { html, text, subject: templateSubject } = await renderTemplate(
      options.template,
      options.data
    );

    return this.provider.send({
      to: options.to,
      from: options.from,
      subject: options.subject || templateSubject,
      html,
      text,
      replyTo: options.replyTo,
      cc: options.cc,
      bcc: options.bcc,
    });
  }

  async sendRaw(options: {
    to: string | string[];
    subject: string;
    html: string;
    text?: string;
    from?: string;
    replyTo?: string;
  }) {
    return this.provider.send(options);
  }
}
```

## Usage Examples

```typescript
// Initialize mailer
import { Mailer } from "@proxed/mail";
import { ResendProvider, ConsoleProvider } from "@proxed/mail/provider";

const provider = process.env.NODE_ENV === "production"
  ? new ResendProvider(process.env.RESEND_API_KEY!)
  : new ConsoleProvider();

const mailer = new Mailer(provider);

// Send welcome email
await mailer.send({
  to: "user@example.com",
  template: "welcome",
  data: {
    name: "John Doe",
    confirmUrl: "https://proxed.com/confirm?token=abc123",
  },
});

// Send to multiple recipients
await mailer.send({
  to: ["admin1@example.com", "admin2@example.com"],
  template: "execution-error",
  data: {
    projectName: "My API",
    errorMessage: "Rate limit exceeded",
    executionId: "exec_123",
    dashboardUrl: "https://proxed.com/dashboard/executions/exec_123",
  },
  cc: "notifications@example.com",
});

// Send raw HTML email
await mailer.sendRaw({
  to: "user@example.com",
  subject: "Custom Email",
  html: "<h1>Custom HTML</h1>",
  text: "Custom text version",
});
```

## Testing Email Templates

```typescript
// Preview server for development
import { render } from "@react-email/render";
import express from "express";
import { WelcomeEmail } from "./emails/Welcome";

const app = express();

app.get("/preview/:template", async (req, res) => {
  const { template } = req.params;

  let component: React.ReactElement;

  switch (template) {
    case "welcome":
      component = <WelcomeEmail {...WelcomeEmail.PreviewProps} />;
      break;
    // Add other templates...
    default:
      return res.status(404).send("Template not found");
  }

  const html = await render(component);
  res.send(html);
});

app.listen(3333, () => {
  console.log("Email preview server running on http://localhost:3333");
});
```

## Best Practices

1. **Always provide both HTML and text versions**
2. **Use inline styles for maximum compatibility**
3. **Test emails across different clients**
4. **Keep templates simple and semantic**
5. **Include unsubscribe links where required**
6. **Handle provider failures gracefully**

## Common Pitfalls

❌ Don't use external CSS files
❌ Don't rely on JavaScript in emails
❌ Don't use modern CSS features without fallbacks
❌ Don't forget to test with real email providers
❌ Don't send emails without user consent
