---
description: Row Level Security policies
globs: **/migrations/**/*.sql
---
# Row Level Security (RLS) Policies

## Core Policy Structure

- Create separate policies for each operation type (SELECT, INSERT, UPDATE, DELETE)
- Use descriptive policy names that explain the purpose
- Specify roles with the `TO` clause

```sql
CREATE POLICY "Users can view own records"
ON public.profiles
FOR SELECT
TO authenticated
USING ((select auth.uid()) = user_id);
```

## Operation-Specific Requirements

- **SELECT** policies should have USING but not WITH CHECK
- **INSERT** policies should have WITH CHECK but not USING
- **UPDATE** policies should have both USING and WITH CHECK
- **DELETE** policies should have USING but not WITH CHECK

```sql
-- Select policy
CREATE POLICY "Users can view own records"
ON public.profiles
FOR SELECT
TO authenticated
USING ((select auth.uid()) = user_id);

-- Insert policy
CREATE POLICY "Users can create own records"
ON public.profiles
FOR INSERT
TO authenticated
WITH CHECK ((select auth.uid()) = user_id);

-- Update policy
CREATE POLICY "Users can update own records"
ON public.profiles
FOR UPDATE
TO authenticated
USING ((select auth.uid()) = user_id)
WITH CHECK ((select auth.uid()) = user_id);

-- Delete policy
CREATE POLICY "Users can delete own records"
ON public.profiles
FOR DELETE
TO authenticated
USING ((select auth.uid()) = user_id);
```

## Performance Optimization

### Add Indexes

Add indexes on columns referenced in RLS policies:

```sql
CREATE INDEX idx_profile_user_id
ON public.profiles
USING btree (user_id);
```

### Use `select` with Functions

Wrap functions in `select` to improve performance:

```sql
-- Inefficient
CREATE POLICY "Users can view own records"
ON public.profiles
FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- Optimized
CREATE POLICY "Users can view own records"
ON public.profiles
FOR SELECT
TO authenticated
USING ((select auth.uid()) = user_id);
```

### Minimize Joins

Avoid joins between source and target tables in policies:

```sql
-- Inefficient (with join)
CREATE POLICY "Users can access team records"
ON public.team_items
FOR SELECT
TO authenticated
USING (
  (select auth.uid()) IN (
    SELECT user_id
    FROM team_user
    WHERE team_user.team_id = team_items.team_id
  )
);

-- Optimized (no join)
CREATE POLICY "Users can access team records"
ON public.team_items
FOR SELECT
TO authenticated
USING (
  team_id IN (
    SELECT team_id
    FROM team_user
    WHERE user_id = (select auth.uid())
  )
);
```

## Auth Roles and Helper Functions

### Role Types

- `anon`: Unauthenticated requests
- `authenticated`: Logged-in user requests

### Helper Functions

- `auth.uid()`: Returns the ID of the user making the request
- `auth.jwt()`: Returns the JWT of the user (access app_metadata and user_metadata)

### Using app_metadata

Restrict based on team membership:

```sql
CREATE POLICY "User is in team"
ON public.team_items
FOR SELECT
TO authenticated
USING (team_id IN (
  SELECT jsonb_array_elements_text(auth.jwt()->'app_metadata'->'teams')::bigint
));
```

### MFA Requirements

Restrict operations based on authentication level:

```sql
CREATE POLICY "Require MFA for updates"
ON public.sensitive_data
FOR UPDATE
TO authenticated
USING ((select auth.jwt()->>'aal') = 'aal2');
```

## Policy Type Guidance

- Prefer PERMISSIVE policies (default) over RESTRICTIVE policies
- Only use RESTRICTIVE when you need to add additional constraints to existing PERMISSIVE policies
