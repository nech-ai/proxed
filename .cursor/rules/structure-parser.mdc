---
description:
globs: packages/structure/*
alwaysApply: false
---
# Structure Parser/Generator Package Rules

## Overview

The structure package provides utilities to parse code structures (Swift, TypeScript, etc.) and generate corresponding TypeScript interfaces/types.

## Core Technologies

- **Language**: TypeScript
- **Testing**: Bun test (vitest compatible)
- **Parsing**: Custom parsers for Swift, TypeScript
- **Code Generation**: TypeScript AST manipulation

## Project Structure

```
packages/structure/
├── src/
│   ├── __tests__/         # Test files
│   ├── parser/           # Language parsers
│   │   ├── base.ts       # Base parser class
│   │   ├── swift.ts      # Swift parser
│   │   ├── typescript.ts # TypeScript parser
│   │   ├── types/        # Parser type definitions
│   │   └── utils/        # Parser utilities
│   ├── generator/        # Code generators
│   │   └── base.ts       # Base generator
│   ├── converters/       # Type converters
│   └── index.ts         # Main exports
└── index.ts             # Package entry
```

## Parser Implementation

### Base Parser Pattern

```typescript
// parser/base.ts
export abstract class BaseParser<T extends ParsedType> {
  protected input: string;
  protected position: number = 0;
  protected line: number = 1;
  protected column: number = 1;

  constructor(input: string) {
    this.input = input;
  }

  abstract parse(): T[];

  protected advance(count: number = 1): void {
    for (let i = 0; i < count; i++) {
      if (this.position < this.input.length) {
        if (this.input[this.position] === '\n') {
          this.line++;
          this.column = 1;
        } else {
          this.column++;
        }
        this.position++;
      }
    }
  }

  protected peek(offset: number = 0): string {
    return this.input[this.position + offset] || '';
  }

  protected consume(expected: string): void {
    if (this.peek() !== expected) {
      throw new ParseError(
        `Expected '${expected}' but got '${this.peek()}'`,
        this.line,
        this.column
      );
    }
    this.advance();
  }

  protected skipWhitespace(): void {
    while (/\s/.test(this.peek())) {
      this.advance();
    }
  }

  protected isAtEnd(): boolean {
    return this.position >= this.input.length;
  }
}
```

### Swift Parser Implementation

```typescript
// parser/swift.ts
import { BaseParser } from './base';
import type { SwiftStruct, SwiftProperty, SwiftType } from './types';

export class SwiftParser extends BaseParser<SwiftStruct> {
  parse(): SwiftStruct[] {
    const structs: SwiftStruct[] = [];

    while (!this.isAtEnd()) {
      this.skipWhitespace();

      if (this.peek() === '/' && this.peek(1) === '/') {
        this.skipLineComment();
      } else if (this.peek() === '/' && this.peek(1) === '*') {
        this.skipBlockComment();
      } else if (this.matchKeyword('struct')) {
        structs.push(this.parseStruct());
      } else if (this.matchKeyword('class')) {
        structs.push(this.parseClass());
      } else {
        this.advance();
      }
    }

    return structs;
  }

  private parseStruct(): SwiftStruct {
    this.consumeKeyword('struct');
    this.skipWhitespace();

    const name = this.parseIdentifier();
    const generics = this.parseGenerics();
    const inheritance = this.parseInheritance();

    this.skipWhitespace();
    this.consume('{');

    const properties = this.parseProperties();

    this.consume('}');

    return {
      type: 'struct',
      name,
      generics,
      inheritance,
      properties,
    };
  }

  private parseProperty(): SwiftProperty {
    const modifiers: string[] = [];

    // Parse modifiers (public, private, static, etc.)
    while (this.isModifier(this.peekWord())) {
      modifiers.push(this.parseIdentifier());
      this.skipWhitespace();
    }

    // Parse let/var
    const isConstant = this.matchKeyword('let');
    if (!isConstant && !this.matchKeyword('var')) {
      throw new ParseError('Expected let or var');
    }

    this.skipWhitespace();
    const name = this.parseIdentifier();

    this.skipWhitespace();
    this.consume(':');
    this.skipWhitespace();

    const type = this.parseType();
    const defaultValue = this.parseDefaultValue();

    return {
      name,
      type,
      isConstant,
      isOptional: type.isOptional,
      defaultValue,
      modifiers,
    };
  }

  private parseType(): SwiftType {
    let baseType = this.parseBaseType();
    let isOptional = false;
    let isArray = false;

    // Check for array syntax [Type]
    if (this.peek() === '[') {
      this.advance();
      baseType = this.parseType();
      this.consume(']');
      isArray = true;
    }

    // Check for optional ?
    if (this.peek() === '?') {
      this.advance();
      isOptional = true;
    }

    return {
      name: baseType.name,
      isOptional,
      isArray,
      generics: baseType.generics,
    };
  }
}
```

### TypeScript Parser Implementation

```typescript
// parser/typescript.ts
export class TypeScriptParser extends BaseParser<TypeScriptInterface> {
  parse(): TypeScriptInterface[] {
    const interfaces: TypeScriptInterface[] = [];

    while (!this.isAtEnd()) {
      this.skipWhitespace();
      this.skipComments();

      if (this.matchKeyword('interface')) {
        interfaces.push(this.parseInterface());
      } else if (this.matchKeyword('type')) {
        const typeAlias = this.parseTypeAlias();
        if (this.isObjectType(typeAlias)) {
          interfaces.push(this.convertToInterface(typeAlias));
        }
      } else if (this.matchKeyword('export')) {
        this.skipWhitespace();
        // Continue parsing after export
      } else {
        this.advance();
      }
    }

    return interfaces;
  }

  private parseInterface(): TypeScriptInterface {
    this.consumeKeyword('interface');
    this.skipWhitespace();

    const name = this.parseIdentifier();
    const generics = this.parseGenerics();
    const extending = this.parseExtends();

    this.skipWhitespace();
    this.consume('{');

    const properties = this.parseProperties();

    this.consume('}');

    return {
      type: 'interface',
      name,
      generics,
      extending,
      properties,
    };
  }
}
```

## Type Conversion

### Swift to TypeScript Converter

```typescript
// converters/swift-to-typescript.ts
export class SwiftToTypeScriptConverter {
  private typeMap: Record<string, string> = {
    'String': 'string',
    'Int': 'number',
    'Double': 'number',
    'Float': 'number',
    'Bool': 'boolean',
    'Date': 'Date',
    'Data': 'Uint8Array',
    'Any': 'any',
    'AnyObject': 'Record<string, any>',
    'Void': 'void',
  };

  convert(swiftStructs: SwiftStruct[]): string {
    return swiftStructs
      .map(struct => this.convertStruct(struct))
      .join('\n\n');
  }

  private convertStruct(struct: SwiftStruct): string {
    const { name, properties, generics } = struct;

    const genericParams = generics.length > 0
      ? `<${generics.join(', ')}>`
      : '';

    const convertedProperties = properties
      .map(prop => this.convertProperty(prop))
      .join('\n  ');

    return `export interface ${name}${genericParams} {\n  ${convertedProperties}\n}`;
  }

  private convertProperty(property: SwiftProperty): string {
    const { name, type, isOptional, defaultValue } = property;
    const tsType = this.convertType(type);
    const optional = isOptional ? '?' : '';

    let propertyDef = `${name}${optional}: ${tsType};`;

    if (defaultValue && !isOptional) {
      propertyDef += ` // default: ${defaultValue}`;
    }

    return propertyDef;
  }

  private convertType(type: SwiftType): string {
    const { name, isArray, generics } = type;

    // Map basic types
    let tsType = this.typeMap[name] || name;

    // Handle generics
    if (generics && generics.length > 0) {
      const genericTypes = generics.map(g => this.convertType(g)).join(', ');
      tsType = `${tsType}<${genericTypes}>`;
    }

    // Handle arrays
    if (isArray) {
      tsType = `${tsType}[]`;
    }

    return tsType;
  }
}
```

## Generator Implementation

```typescript
// generator/base.ts
export abstract class BaseGenerator {
  protected indentLevel: number = 0;
  protected indentSize: number = 2;
  protected output: string[] = [];

  abstract generate(ast: any): string;

  protected write(line: string = ''): void {
    const indent = ' '.repeat(this.indentLevel * this.indentSize);
    this.output.push(indent + line);
  }

  protected indent(): void {
    this.indentLevel++;
  }

  protected dedent(): void {
    this.indentLevel = Math.max(0, this.indentLevel - 1);
  }

  protected getOutput(): string {
    return this.output.join('\n');
  }
}
```

## Testing Patterns

```typescript
// __tests__/swift-parser.test.ts
import { describe, it, expect } from "bun:test";
import { SwiftParser } from "../parser/swift";
import { SwiftToTypeScriptConverter } from "../converters/swift-to-typescript";

describe("SwiftParser", () => {
  it("should parse simple struct", () => {
    const input = `
      struct User {
        let id: String
        var name: String
        var age: Int?
      }
    `;

    const parser = new SwiftParser(input);
    const result = parser.parse();

    expect(result).toHaveLength(1);
    expect(result[0].name).toBe("User");
    expect(result[0].properties).toHaveLength(3);
    expect(result[0].properties[0]).toEqual({
      name: "id",
      type: { name: "String", isOptional: false, isArray: false },
      isConstant: true,
      isOptional: false,
      defaultValue: undefined,
      modifiers: [],
    });
  });

  it("should handle generic types", () => {
    const input = `
      struct Response<T> {
        let data: T
        let status: Int
        var errors: [String]?
      }
    `;

    const parser = new SwiftParser(input);
    const result = parser.parse();

    expect(result[0].generics).toEqual(["T"]);
    expect(result[0].properties[2].type.isArray).toBe(true);
    expect(result[0].properties[2].type.isOptional).toBe(true);
  });
});

describe("SwiftToTypeScriptConverter", () => {
  it("should convert Swift struct to TypeScript interface", () => {
    const swiftCode = `
      struct User {
        let id: String
        var name: String
        var age: Int?
        var tags: [String]
      }
    `;

    const parser = new SwiftParser(swiftCode);
    const structs = parser.parse();
    const converter = new SwiftToTypeScriptConverter();
    const typescript = converter.convert(structs);

    expect(typescript).toBe(`export interface User {
  id: string;
  name: string;
  age?: number;
  tags: string[];
}`);
  });
});
```

## Utility Functions

```typescript
// utils/parser-utils.ts
export class ParseError extends Error {
  constructor(
    message: string,
    public line: number,
    public column: number
  ) {
    super(`${message} at line ${line}, column ${column}`);
    this.name = 'ParseError';
  }
}

export function isKeyword(word: string): boolean {
  const keywords = [
    'struct', 'class', 'enum', 'protocol', 'extension',
    'let', 'var', 'func', 'init', 'deinit',
    'public', 'private', 'internal', 'fileprivate', 'open',
    'static', 'final', 'lazy', 'weak', 'unowned',
  ];
  return keywords.includes(word);
}

export function isBuiltInType(type: string): boolean {
  const builtInTypes = [
    'String', 'Int', 'Double', 'Float', 'Bool',
    'Character', 'Date', 'Data', 'URL', 'UUID',
    'Array', 'Dictionary', 'Set', 'Optional',
  ];
  return builtInTypes.includes(type);
}
```

## API Usage Examples

```typescript
// Basic usage
import { parseSwift, SwiftToTypeScriptConverter } from '@proxed/structure';

const swiftCode = `
struct APIResponse {
  let id: String
  let data: [User]
  var metadata: [String: Any]?
}

struct User {
  let id: String
  var name: String
  var email: String?
}
`;

const structs = parseSwift(swiftCode);
const converter = new SwiftToTypeScriptConverter();
const typescript = converter.convert(structs);

console.log(typescript);
// Output:
// export interface APIResponse {
//   id: string;
//   data: User[];
//   metadata?: Record<string, any>;
// }
//
// export interface User {
//   id: string;
//   name: string;
//   email?: string;
// }
```

## Best Practices

1. **Always validate input before parsing**
2. **Provide clear error messages with line/column info**
3. **Support common language features incrementally**
4. **Write comprehensive tests for edge cases**
5. **Keep parsers modular and extensible**

## Common Pitfalls

❌ Don't assume all Swift types have TypeScript equivalents
❌ Don't forget to handle nested generic types
❌ Don't ignore whitespace and comments in parsing
❌ Don't hardcode type mappings without configuration
❌ Don't forget to handle circular type references
