---
description: 
globs: 
alwaysApply: true
---
# Project Structure and Code Standards

## Project Organization
- ./apps: Contains deployable applications
  - /app (@proxed/app): Dashboard for projects, user management and security (NextJS, React, Tailwind, Supabase, Shadcn)
  - /web (@proxed/web): Marketing website (NextJS, React, Tailwind, Shadcn)
  - /api (@proxed/api): Supabase configuration and database migrations (Supabase, Deno)
  - /proxy (@proxed/proxy): API proxy to connect all clients (NextJS, Supabase)
  - /docs (@proxed/docs): Fumadocs application with documentation
- ./packages: Contains shared code between apps
  - /ui (@proxed/ui): UI library with Shadcn components, global.css, Tailwind configuration
  - /supabase (@proxed/supabase): Shared queries, cached queries, mutations, and database types

## Code Standards

### Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

### Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components

### TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

### Syntax and Formatting
- Use the "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX

### UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach

## Next.js Best Practices

### State Management
- Use `nuqs` for URL search parameter management
- Implement `useQueryState` for client-side query state
```typescript
'use client'

import { useQueryState } from 'nuqs'

export function Demo() {
  const [name, setName] = useQueryState('name')
  return (
    <>
      <input value={name || ''} onChange={e => setName(e.target.value)} />
      <button onClick={() => setName(null)}>Clear</button>
      <p>Hello, {name || 'anonymous visitor'}!</p>
    </>
  )
}
```

- Create server-side query management with `createSearchParamsCache`
```typescript
import {
  createSearchParamsCache,
  parseAsInteger,
  parseAsStringLiteral,
} from "nuqs/server";

export const searchParamsCache = createSearchParamsCache({
  type: parseAsStringLiteral([
    "one",
    "two",
  ] as const),
  page: parseAsInteger.withDefault(1),
  perPage: parseAsInteger.withDefault(25),
});
```

### Server Actions
- Use `next-safe-action` for type-safe server actions
- Define schemas and types in separate files for reusability
- Create action clients with appropriate middleware

#### Schema Definition
```typescript
// schema.ts
import { z } from "zod";

export const exampleSchema = z.object({
  name: z.string().min(2, {
    message: "Name must be at least 2 characters.",
  }),
  redirectTo: z.string().optional(),
  revalidatePath: z.string().optional(),
});

export type ExampleFormValues = z.infer<typeof exampleSchema>;
```

#### Action Client Setup
```typescript
// safe-action.ts
import { createSafeActionClient } from "next-safe-action";
import { createClient } from "@proxed/supabase/server";
import { getUser } from "@proxed/supabase/cached-queries";

export const actionClient = createSafeActionClient({
  handleServerError: (e) => e instanceof Error ? e.message : "An error occurred",
});

export const authActionClient = actionClient
  // Add logging middleware
  .use(async ({ next, clientInput, metadata }) => {
    const result = await next({ ctx: {} });
    return result;
  })
  // Add authentication middleware
  .use(async ({ next }) => {
    const userData = await getUser();
    const user = userData?.data;
    const supabase = await createClient();

    if (!user) {
      throw new Error("Unauthorized");
    }

    return next({
      ctx: {
        supabase,
        user,
      },
    });
  });
```

#### Action Implementation
```typescript
// actions/example-action.ts
"use server";

import { revalidatePath } from "next/cache";
import { authActionClient } from "./safe-action";
import { exampleSchema } from "./schema";

export const exampleAction = authActionClient
  .schema(exampleSchema)
  .action(
    async ({
      parsedInput: { revalidatePath: revalidatePath, ...data },
      ctx: { user, supabase },
    }) => {
      try {
        // Action implementation
        const result = await someOperation(data);

        // Handle revalidation if needed
        if (revalidatePath) {
          revalidatePath(revalidatePath);
        }

        return result;
      } catch (error) {
        throw new Error(error instanceof Error ? error.message : "An error occurred");
      }
    },
  );
```

### Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC)
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: use WebP format, include size data, implement lazy loading

## Testing
- Use "bun:test" for writing tests
- "bun:test" is fully compatible with vitest and jest
