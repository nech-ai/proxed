---
description: Consolidated Supabase implementation - SQL, auth, client usage, and best practices
globs: ["**/migrations/**/*.sql", "apps/app/**/*", "packages/supabase/**/*"]
alwaysApply: false
---
# Supabase: Consolidated Implementation Guide

## Overview

Comprehensive guide for Supabase implementation covering SQL migrations, authentication, client usage, and best practices across the Proxed monorepo.

## Part 1: SQL and Database Management

### Naming Conventions

- Use `snake_case` for tables, columns, and database objects
- Avoid SQL reserved words and stay under 63 characters
- Prefer plurals for table names (e.g., `users`)
- Prefer singular names for columns (e.g., `user_id`)
- For foreign keys, use singular table name with `_id` suffix

### Table Structure

```sql
create table public.books (
  id bigint generated always as identity primary key,
  title text not null,
  author_id bigint references public.authors (id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

comment on table public.books is 'A list of all the books in the library.';

-- Always enable RLS
alter table public.books enable row level security;
```

### SQL Query Style

```sql
-- Small queries
select *
from public.employees
where end_date is null;

-- Complex queries with CTEs
with department_employees as (
  -- Get all employees and their departments
  select
    e.department_id,
    e.first_name,
    e.last_name,
    d.department_name
  from
    public.employees e
  join
    public.departments d on e.department_id = d.department_id
)
select
  department_name,
  count(*) as num_employees
from
  department_employees
group by
  department_name
order by
  department_name;
```

### Database Functions

```sql
create or replace function public.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on public.books
for each row
execute function public.update_updated_at();
```

### Migration Guidelines

#### File Naming
Format: `YYYYMMDDHHmmss_short_description.sql`
Example: `20240906123045_create_profiles.sql`

#### Migration Template
```sql
-- Migration: Create user profiles table
-- Purpose: Store additional user profile information
-- Affected: public.profiles table

-- Create profiles table
create table public.profiles (
  id uuid references auth.users(id) on delete cascade primary key,
  display_name text,
  avatar_url text,
  bio text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

comment on table public.profiles is 'User profile information linked to auth.users';

-- Enable RLS
alter table public.profiles enable row level security;

-- RLS Policies
create policy "Users can view their own profile" on public.profiles
  for select using (auth.uid() = id);

create policy "Users can update their own profile" on public.profiles
  for update using (auth.uid() = id);

create policy "Users can insert their own profile" on public.profiles
  for insert with check (auth.uid() = id);

-- Trigger for updated_at
create trigger profiles_updated_at_trigger
  before update on public.profiles
  for each row
  execute function public.update_updated_at();
```

## Part 2: Authentication Implementation

### Required Setup

```bash
npm install @supabase/supabase-js @supabase/ssr
```

Environment variables:
```env
NEXT_PUBLIC_SUPABASE_URL=your-project-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
```

### Client Implementations

#### Browser Client
```typescript
// packages/supabase/src/clients/client.ts
import { createBrowserClient } from '@supabase/ssr'
import type { Database } from '../types/db.generated'

export function createClient() {
  return createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

#### Server Client (Next.js 15 Compatible)
```typescript
// packages/supabase/src/clients/server.ts
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import type { Database } from '../types/db.generated'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // Called from Server Component - ignore
          }
        },
      },
    }
  )
}
```

#### Service Role Client
```typescript
// packages/supabase/src/clients/api.ts
import { createClient as createSupabaseClient } from '@supabase/supabase-js'
import type { Database } from '../types/db.generated'

export function createAdminClient() {
  return createSupabaseClient<Database>(
    process.env.SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!,
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
      },
    }
  )
}
```

### Middleware Implementation
```typescript
// apps/app/middleware.ts
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  let supabaseResponse = NextResponse.next({ request })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({ request })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // IMPORTANT: Do not remove this call
  const { data: { user } } = await supabase.auth.getUser()

  // Redirect logic
  if (!user && !request.nextUrl.pathname.startsWith('/auth')) {
    const url = request.nextUrl.clone()
    url.pathname = '/auth/login'
    return NextResponse.redirect(url)
  }

  return supabaseResponse
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

## Part 3: Database Operations

### Query Patterns

#### Basic Queries
```typescript
// packages/supabase/src/queries/index.ts
import { createClient } from '../clients/server'
import type { Database } from '../types/db.generated'

export async function requireUser() {
  const supabase = await createClient()
  const { data: { user }, error } = await supabase.auth.getUser()
  
  if (error || !user) {
    throw new Error('Unauthorized')
  }
  
  return user
}

export async function getTeams(userId: string) {
  const supabase = await createClient()

  const { data, error } = await supabase
    .from('teams')
    .select(`
      *,
      team_members!inner(
        role,
        user_id
      )
    `)
    .eq('team_members.user_id', userId)
    .order('created_at', { ascending: false })

  if (error) throw error
  return data
}
```

#### Cached Queries
```typescript
// packages/supabase/src/queries/cached-queries.ts
import { unstable_cache } from 'next/cache'
import { getTeams } from './index'

export const getCachedTeams = unstable_cache(
  async (userId: string) => getTeams(userId),
  ['user-teams'],
  {
    tags: ['teams'],
    revalidate: 60 * 5, // 5 minutes
  }
)
```

#### Mutations with Cache Invalidation
```typescript
// packages/supabase/src/mutations/index.ts
import { createClient } from '../clients/server'
import { revalidateTag } from 'next/cache'

export async function createTeam(data: { name: string; slug: string }) {
  const supabase = await createClient()
  const user = await requireUser()

  // Create team
  const { data: team, error: teamError } = await supabase
    .from('teams')
    .insert({
      ...data,
      created_by: user.id,
    })
    .select()
    .single()

  if (teamError) throw teamError

  // Add creator as owner
  const { error: memberError } = await supabase
    .from('team_members')
    .insert({
      team_id: team.id,
      user_id: user.id,
      role: 'owner',
    })

  if (memberError) {
    // Rollback
    await supabase.from('teams').delete().eq('id', team.id)
    throw memberError
  }

  // Invalidate cache
  revalidateTag('teams')
  return team
}
```

### Type Safety

#### Generated Types
```typescript
// packages/supabase/src/types/db.generated.ts
// Generated by: supabase gen types typescript --local

export interface Database {
  public: {
    Tables: {
      teams: {
        Row: {
          id: string
          name: string
          slug: string
          created_at: string
          updated_at: string
          created_by: string | null
        }
        Insert: {
          id?: string
          name: string
          slug: string
          created_at?: string
          updated_at?: string
          created_by?: string | null
        }
        Update: {
          id?: string
          name?: string
          slug?: string
          updated_at?: string
        }
      }
    }
  }
}
```

#### Helper Types
```typescript
// packages/supabase/src/types/db.ts
import type { Database } from './db.generated'

export type Tables<T extends keyof Database['public']['Tables']> =
  Database['public']['Tables'][T]['Row']

export type InsertTables<T extends keyof Database['public']['Tables']> =
  Database['public']['Tables'][T]['Insert']

export type UpdateTables<T extends keyof Database['public']['Tables']> =
  Database['public']['Tables'][T]['Update']

// Relationship types
export type TeamWithMembers = Tables<'teams'> & {
  team_members: (Tables<'team_members'> & {
    user: Pick<Tables<'users'>, 'id' | 'email' | 'display_name'>
  })[]
}
```

## Part 4: Component Usage

### Server Components
```typescript
// apps/app/app/dashboard/page.tsx
import { createClient } from '@proxed/supabase/server'

export default async function Dashboard() {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()

  if (!user) {
    redirect('/auth/login')
  }

  const teams = await getTeams(user.id)

  return (
    <div>
      <h1>Welcome, {user.email}</h1>
      <TeamsList teams={teams} />
    </div>
  )
}
```

### Client Components
```typescript
// apps/app/components/auth/LoginForm.tsx
'use client'
import { createClient } from '@proxed/supabase/client'
import { useState } from 'react'
import { useRouter } from 'next/navigation'

export function LoginForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const router = useRouter()
  const supabase = createClient()

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })

      if (error) throw error

      router.push('/dashboard')
      router.refresh()
    } catch (error) {
      console.error('Login error:', error)
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleLogin} className="space-y-4">
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required
        disabled={loading}
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
        required
        disabled={loading}
      />
      <button type="submit" disabled={loading}>
        {loading ? 'Signing in...' : 'Sign In'}
      </button>
    </form>
  )
}
```

## Required Patterns

### ✅ Always Do
- Use typed clients with Database generic
- Enable RLS on all public tables
- Use `@supabase/ssr` for Next.js integration
- Cache read queries with appropriate revalidation
- Invalidate cache after mutations
- Use `requireUser()` for protected operations
- Handle Supabase errors properly
- Use the new `getAll()` and `setAll()` cookie methods

### ❌ Never Do
- Use `@supabase/auth-helpers-nextjs` (deprecated)
- Use individual cookie methods (`get`, `set`, `remove`)
- Skip RLS policies for security
- Expose service role key in client code
- Create multiple client instances unnecessarily
- Forget to handle auth state changes
- Use blocking queries in client components
- Skip error handling in auth flows

## Testing

```typescript
// packages/supabase/__tests__/queries.test.ts
import { describe, it, expect, beforeEach, mock } from 'bun:test'
import { createClient } from '../src/clients/server'

// Mock the client
mock.module('../src/clients/server', () => ({
  createClient: mock(() => ({
    from: mock(() => ({
      select: mock(() => ({
        eq: mock(() => ({
          single: mock(async () => ({ data: mockData, error: null })),
        })),
      })),
    })),
    auth: {
      getUser: mock(async () => ({ data: { user: mockUser }, error: null })),
    },
  })),
}))

describe('Supabase Queries', () => {
  it('should fetch user teams', async () => {
    // Test implementation
  })
})
```

## Commands

```bash
# Generate types
bun run supabase:generate

# Start local Supabase
bun run supabase:start

# Create migration
bunx supabase migration new create_profiles

# Reset database
bun run supabase:reset

# Run migrations
bun run supabase:migrate
```