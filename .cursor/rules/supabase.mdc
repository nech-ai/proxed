---
description: Supabase SQL and database management
globs: **/migrations/**/*.sql
---
# Supabase: SQL Style and Database Management

## Naming Conventions

- Use snake_case for tables, columns, and database objects
- Avoid SQL reserved words and stay under 63 characters
- Prefer plurals for table names (e.g., `users`)
- Prefer singular names for columns (e.g., `user_id`)
- For foreign keys, use singular table name with `_id` suffix (e.g., `user_id` to reference `users` table)

## Table Structure

- Always add an `id` column of type `identity generated always` unless otherwise specified
- Create tables in the `public` schema by default
- Always add comments to describe table purpose (up to 1024 characters)
- Always qualify schema names in SQL queries for clarity

```sql
create table public.books (
  id bigint generated always as identity primary key,
  title text not null,
  author_id bigint references public.authors (id)
);
comment on table public.books is 'A list of all the books in the library.';
```

## SQL Query Style

- Add spaces and newlines for readability
- Use lowercase for SQL reserved words
- Format smaller queries concisely, larger queries with more structure

### Small Query Example
```sql
select *
from public.employees
where end_date is null;

update public.employees
set end_date = '2023-12-31'
where employee_id = 1001;
```

### Larger Query Example
```sql
select
  first_name,
  last_name
from
  public.employees
where
  start_date between '2021-01-01' and '2021-12-31'
and
  status = 'employed';
```

## Joins and Complex Queries

- Align joins and subqueries with related SQL clauses
- Use full table names for clarity
- Use meaningful aliases with the 'as' keyword
- For complex queries, use CTEs (Common Table Expressions) with comments

```sql
with department_employees as (
  -- Get all employees and their departments
  select
    e.department_id,
    e.first_name,
    e.last_name,
    d.department_name
  from
    public.employees e
  join
    public.departments d on e.department_id = d.department_id
),
employee_counts as (
  -- Count employees per department
  select
    department_name,
    count(*) as num_employees
  from
    department_employees
  group by
    department_name
)
select
  department_name,
  num_employees
from
  employee_counts
order by
  department_name;
```

## Database Functions

### Security Best Practices

- Default to `SECURITY INVOKER` (use `SECURITY DEFINER` only when explicitly required)
- Always set `search_path` to empty string (`set search_path = '';`)
- Use fully qualified names for all database objects

### Function Templates

#### Basic Function
```sql
create or replace function public.hello_world()
returns text
language plpgsql
security invoker
set search_path = ''
as $$
begin
  return 'hello world';
end;
$$;
```

#### Function with Parameters
```sql
create or replace function public.calculate_total_price(order_id bigint)
returns numeric
language plpgsql
security invoker
set search_path = ''
as $$
declare
  total numeric;
begin
  select sum(price * quantity)
  into total
  from public.order_items
  where order_id = calculate_total_price.order_id;

  return total;
end;
$$;
```

#### Trigger Function
```sql
create or replace function public.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on public.my_table
for each row
execute function public.update_updated_at();
```

## Function Types

- Prefer `IMMUTABLE` or `STABLE` functions where possible
- Use `VOLATILE` only when function modifies data or has side effects
- Minimize side effects in functions
- Use explicit typing for inputs and outputs

# Database: Create migration

You are a Postgres Expert who loves creating secure database schemas.

This project uses the migrations provided by the Supabase CLI.

## Creating a migration file

Given the context of the user's message, create a database migration file inside the folder `supabase/migrations/`.

The file MUST following this naming convention:

The file MUST be named in the format `YYYYMMDDHHmmss_short_description.sql` with proper casing for months, minutes, and seconds in UTC time:

1. `YYYY` - Four digits for the year (e.g., `2024`).
2. `MM` - Two digits for the month (01 to 12).
3. `DD` - Two digits for the day of the month (01 to 31).
4. `HH` - Two digits for the hour in 24-hour format (00 to 23).
5. `mm` - Two digits for the minute (00 to 59).
6. `ss` - Two digits for the second (00 to 59).
7. Add an appropriate description for the migration.

For example:

```
20240906123045_create_profiles.sql
```


## SQL Guidelines

Write Postgres-compatible SQL code for Supabase migration files that:

- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.
- Includes thorough comments explaining the purpose and expected behavior of each migration step.
- Write all SQL in lowercase.
- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.
- When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access.
- When creating RLS Policies
  - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity.
  - If the table  is intended for public access the policy can simply return `true`.
  - RLS Policies should be granular: one policy for `select`, one for `insert` etc) and for each supabase role (`anon` and `authenticated`). DO NOT combine Policies even if the functionality is the same for both roles.
  - Include comments explaining the rationale and intended behavior of each security policy

The generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.


