---
description: Trigger.dev v3 task implementation - Background jobs and scheduled tasks
globs: ["packages/jobs/**/*", "**/trigger/**/*.ts", "**/trigger/**/*.tsx"]
alwaysApply: false
---

# Trigger.dev v3 Task Implementation

## Overview

Trigger.dev v3 provides reliable background task execution with built-in retries, scheduling, and monitoring for the Proxed platform.

## Setup Commands

```bash
# Initialize Trigger.dev in project
bunx trigger.dev@latest init

# Start development server
bunx trigger.dev@latest dev

# Deploy tasks
bunx trigger.dev@latest deploy
```

## ✅ Required Implementation Pattern

ALWAYS use this exact pattern for Trigger.dev v3:

```typescript
import { task } from "@trigger.dev/sdk/v3";

// You MUST export every task, including subtasks
export const processAnalytics = task({
  // Unique ID within your project
  id: "process-analytics",
  // Main task function
  run: async (payload: { projectId: string; dateRange: string }) => {
    // Task logic here
    console.log(`Processing analytics for project ${payload.projectId}`);
    return { processed: true, projectId: payload.projectId };
  },
});
```

## Task Configuration Options

### Retry Configuration
```typescript
export const taskWithRetries = task({
  id: "task-with-retries",
  retry: {
    maxAttempts: 5,
    factor: 2,
    minTimeoutInMs: 1000,
    maxTimeoutInMs: 30000,
    randomize: true,
  },
  run: async (payload) => {
    // Task logic that may fail and retry
  },
});
```

### Queue Configuration
```typescript
export const oneAtATime = task({
  id: "one-at-a-time",
  queue: {
    concurrencyLimit: 1,
  },
  run: async (payload) => {
    // Only one instance runs at a time
  },
});
```

### Machine Configuration
```typescript
export const heavyTask = task({
  id: "heavy-processing",
  machine: {
    preset: "large-1x", // 4 vCPU, 8 GB RAM
  },
  maxDuration: 300, // 5 minutes
  run: async (payload) => {
    // CPU/memory intensive work
  },
});
```

Available machine presets:
- `micro`: 0.25 vCPU, 0.25 GB RAM
- `small-1x`: 0.5 vCPU, 0.5 GB RAM (default)
- `small-2x`: 1 vCPU, 1 GB RAM
- `medium-1x`: 1 vCPU, 2 GB RAM
- `medium-2x`: 2 vCPU, 4 GB RAM
- `large-1x`: 4 vCPU, 8 GB RAM
- `large-2x`: 8 vCPU, 16 GB RAM

## Lifecycle Hooks

### Complete Lifecycle Example
```typescript
export const fullLifecycleTask = task({
  id: "full-lifecycle",
  init: async (payload, { ctx }) => {
    // Runs before each attempt
    console.log("Initializing task");
    return { startTime: Date.now() };
  },
  cleanup: async (payload, { ctx }) => {
    // Runs after each attempt (success or failure)
    console.log("Cleaning up resources");
  },
  onStart: async (payload, { ctx }) => {
    // Runs once when task starts (not on retries)
    console.log("Task started");
  },
  onSuccess: async (payload, output, { ctx }) => {
    // Runs when task succeeds
    console.log("Task completed successfully");
  },
  onFailure: async (payload, error, { ctx }) => {
    // Runs when task fails after all retries
    console.error("Task failed permanently:", error);
  },
  run: async (payload, { ctx, init }) => {
    // Access init data
    console.log("Started at:", init.startTime);
    
    // Task logic
    return { result: "success" };
  },
});
```

## Scheduled Tasks (Cron)

### Declarative Scheduling
```typescript
import { schedules } from "@trigger.dev/sdk/v3";

// UTC timezone cron
export const dailyReports = schedules.task({
  id: "daily-reports",
  cron: "0 9 * * *", // 9 AM UTC daily
  run: async (payload) => {
    console.log("Scheduled time:", payload.timestamp);
    console.log("Last run:", payload.lastTimestamp);
    console.log("Timezone:", payload.timezone);
    console.log("Schedule ID:", payload.scheduleId);
    console.log("Upcoming runs:", payload.upcoming);
    
    // Generate and send daily reports
  },
});

// Specific timezone scheduling
export const tokyoTask = schedules.task({
  id: "tokyo-task",
  cron: {
    pattern: "0 5 * * *", // 5 AM
    timezone: "Asia/Tokyo",
  },
  run: async (payload) => {
    // Runs at 5 AM Tokyo time
  },
});
```

### Imperative Scheduling
```typescript
// Create schedules dynamically via SDK
const schedule = await schedules.create({
  task: "daily-reports",
  cron: "0 0 * * *",
  deduplicationKey: "user-123-daily",
  externalId: "user-123", // Optional user identifier
});
```

## Schema Validation

### Zod Schema Tasks
```typescript
import { schemaTask } from "@trigger.dev/sdk/v3";
import { z } from "zod";

const EmailSchema = z.object({
  to: z.string().email(),
  subject: z.string(),
  body: z.string(),
  projectId: z.string().uuid(),
});

export const sendEmail = schemaTask({
  id: "send-email",
  schema: EmailSchema,
  run: async (payload) => {
    // Payload is fully typed and validated
    console.log(`Sending email to ${payload.to}`);
    console.log(`Subject: ${payload.subject}`);
    
    // Email sending logic
    return { sent: true, messageId: "msg_123" };
  },
});
```

## Triggering Tasks

### From Backend Code
```typescript
import { tasks } from "@trigger.dev/sdk/v3";
import type { processAnalytics } from "~/packages/jobs/analytics";

// Single task trigger
export async function triggerAnalytics(projectId: string) {
  const handle = await tasks.trigger<typeof processAnalytics>("process-analytics", {
    projectId,
    dateRange: "last-7-days",
  });
  
  return handle;
}

// Batch trigger multiple runs
export async function triggerBatchAnalytics(projectIds: string[]) {
  const batchHandle = await tasks.batchTrigger<typeof processAnalytics>(
    "process-analytics",
    projectIds.map(id => ({ 
      payload: { projectId: id, dateRange: "last-7-days" } 
    }))
  );
  
  return batchHandle;
}

// Trigger and wait for result (use sparingly)
export async function triggerAndWaitAnalytics(projectId: string) {
  const result = await tasks.triggerAndPoll<typeof processAnalytics>(
    "process-analytics",
    { projectId, dateRange: "last-7-days" },
    { pollIntervalMs: 1000 }
  );
  
  return result;
}
```

### From Inside Tasks
```typescript
import { batch } from "@trigger.dev/sdk/v3";

export const parentTask = task({
  id: "parent-task",
  run: async (payload: { userIds: string[] }) => {
    // Trigger child task and wait
    const result = await sendEmail.triggerAndWait({
      to: "user@example.com",
      subject: "Welcome",
      body: "Welcome to Proxed!",
      projectId: "proj_123",
    });
    
    console.log("Email sent:", result.output);
    
    // Batch trigger multiple child tasks
    const batchResults = await sendEmail.batchTriggerAndWait(
      payload.userIds.map(id => ({
        payload: {
          to: `user${id}@example.com`,
          subject: "Batch email",
          body: "This is a batch email",
          projectId: "proj_123",
        }
      }))
    );
    
    // Trigger different tasks in batch
    const mixedBatch = await batch.triggerAndWait([
      { id: "send-email", payload: { to: "admin@proxed.ai", subject: "Alert", body: "Task completed", projectId: "proj_123" } },
      { id: "process-analytics", payload: { projectId: "proj_123", dateRange: "today" } },
    ]);
    
    return { processed: payload.userIds.length };
  },
});
```

## Idempotency

### Basic Idempotency
```typescript
import { idempotencyKeys } from "@trigger.dev/sdk/v3";

export const idempotentTask = task({
  id: "idempotent-task",
  run: async (payload: { userId: string }) => {
    // Create idempotency key
    const idempotencyKey = await idempotencyKeys.create([payload.userId, "welcome-email"]);
    
    // This will only run once per user
    await sendEmail.trigger(
      {
        to: `user-${payload.userId}@example.com`,
        subject: "Welcome!",
        body: "Welcome to Proxed",
        projectId: "proj_123",
      },
      { idempotencyKey }
    );
  },
});
```

### Global Scoped Keys
```typescript
// Globally unique across all runs
const globalKey = await idempotencyKeys.create("global-daily-report", { scope: "global" });

// With TTL (time-to-live)
await childTask.trigger(
  payload,
  { 
    idempotencyKey: globalKey, 
    idempotencyKeyTTL: "24h" // Expires after 24 hours
  }
);
```

## Metadata and Progress Tracking

### Basic Metadata Usage
```typescript
import { task, metadata } from "@trigger.dev/sdk/v3";

export const progressTask = task({
  id: "progress-task",
  run: async (payload: { items: string[] }) => {
    // Set initial metadata
    metadata.set("progress", 0);
    metadata.set("status", "starting");
    metadata.append("logs", "Task started");
    
    for (let i = 0; i < payload.items.length; i++) {
      const item = payload.items[i];
      
      // Process item
      await processItem(item);
      
      // Update progress
      const progress = (i + 1) / payload.items.length;
      metadata.set("progress", progress);
      metadata.append("logs", `Processed item ${i + 1}/${payload.items.length}`);
    }
    
    metadata.set("status", "completed");
    return { processed: payload.items.length };
  },
});
```

### Streaming Metadata
```typescript
export const streamingTask = task({
  id: "streaming-task",
  run: async (payload) => {
    // Stream OpenAI responses
    const stream = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: payload.prompt }],
      stream: true,
    });
    
    // Register stream with metadata
    const metadataStream = await metadata.stream("openai", stream);
    
    let response = "";
    for await (const chunk of metadataStream) {
      response += chunk.choices[0]?.delta?.content || "";
    }
    
    return { response };
  },
});
```

## Realtime Monitoring

### Subscribe to Task Progress
```typescript
import { runs } from "@trigger.dev/sdk/v3";

// Subscribe to a specific run
for await (const run of runs.subscribeToRun(handle.id)) {
  console.log("Run status:", run.status);
  console.log("Progress:", run.metadata?.progress);
}

// Subscribe with type safety
for await (const run of runs.subscribeToRun<typeof progressTask>(handle.id)) {
  if (run.output) {
    console.log("Processed items:", run.output.processed);
  }
}

// Subscribe to streaming data
for await (const part of runs.subscribeToRun<typeof streamingTask>(runId).withStreams()) {
  switch (part.type) {
    case "run":
      console.log("Run update:", part.run);
      break;
    case "openai":
      console.log("OpenAI chunk:", part.chunk);
      break;
  }
}
```

## React Hooks

### Installation and Setup
```bash
npm add @trigger.dev/react-hooks
```

```typescript
// app/providers.tsx
"use client";
import { TriggerAuthContext } from "@trigger.dev/react-hooks";

export function TriggerProvider({ children, accessToken }: { children: React.ReactNode; accessToken: string }) {
  return (
    <TriggerAuthContext.Provider value={{ accessToken }}>
      {children}
    </TriggerAuthContext.Provider>
  );
}
```

### Using Hooks
```typescript
"use client";
import { useRealtimeRun } from "@trigger.dev/react-hooks";
import type { progressTask } from "@/packages/jobs/analytics";

export function TaskProgress({ runId }: { runId: string }) {
  const { run, error } = useRealtimeRun<typeof progressTask>(runId);

  if (error) return <div>Error: {error.message}</div>;
  if (!run) return <div>Loading...</div>;

  const progress = run.metadata?.progress as number || 0;

  return (
    <div>
      <h3>Task Status: {run.status}</h3>
      <progress value={progress} max={1}>
        {Math.round(progress * 100)}%
      </progress>
      {run.output && <p>Processed: {run.output.processed} items</p>}
    </div>
  );
}
```

## Logging

### Structured Logging
```typescript
import { task, logger } from "@trigger.dev/sdk/v3";

export const loggingTask = task({
  id: "logging-example",
  run: async (payload: { userId: string }) => {
    // Different log levels
    logger.debug("Debug info", { userId: payload.userId });
    logger.info("Processing started", { userId: payload.userId });
    logger.warn("Warning message", { userId: payload.userId });
    logger.error("Error occurred", { userId: payload.userId, error: "details" });
    
    return { success: true };
  },
});
```

## Configuration

### trigger.config.ts
```typescript
import { defineConfig } from "@trigger.dev/sdk/v3";

export default defineConfig({
  project: process.env.TRIGGER_PROJECT_ID!,
  dirs: ["./packages/jobs"],
  runtime: "node", // or "bun" (experimental)
  defaultMachine: "small-1x",
  maxDuration: 300, // 5 minutes default
  logLevel: "info",
  retries: {
    enabledInDev: false,
    default: {
      maxAttempts: 3,
      minTimeoutInMs: 1000,
      maxTimeoutInMs: 30000,
      factor: 2,
      randomize: true,
    },
  },
  build: {
    extensions: [
      // Add any build extensions needed
    ],
  },
  // Global lifecycle hooks
  onStart: async (payload, { ctx }) => {
    console.log("Task started:", ctx.task.id);
  },
  onSuccess: async (payload, output, { ctx }) => {
    console.log("Task succeeded:", ctx.task.id);
  },
  onFailure: async (payload, error, { ctx }) => {
    console.error("Task failed:", ctx.task.id, error);
  },
});
```

## Environment Variables

Required environment variables:
```env
TRIGGER_SECRET_KEY=your-secret-key
TRIGGER_PROJECT_ID=your-project-id
```

## Required Patterns

### ✅ Always Do
- Use `@trigger.dev/sdk/v3` imports
- Export every task (including subtasks)
- Use unique task IDs within your project
- Add proper TypeScript types to payloads
- Use idempotency keys for critical operations
- Add retry configuration for unreliable operations
- Use metadata for progress tracking
- Use structured logging with context

### ❌ Never Do
- Use deprecated v2 patterns (`client.defineJob`, `eventTrigger`, etc.)
- Forget to export tasks
- Use duplicate task IDs
- Skip error handling in task logic
- Use `triggerAndWait` in web requests (blocks)
- Ignore idempotency for critical operations
- Skip type safety for payloads

## Testing

```typescript
// packages/jobs/__tests__/analytics.test.ts
import { describe, it, expect, beforeEach, mock } from "bun:test";
import { processAnalytics } from "../analytics";

describe("Analytics Tasks", () => {
  beforeEach(() => {
    // Setup test environment
  });

  it("should process analytics correctly", async () => {
    const payload = { projectId: "test-project", dateRange: "last-7-days" };
    
    // Test task logic
    const result = await processAnalytics.run(payload);
    
    expect(result.processed).toBe(true);
    expect(result.projectId).toBe("test-project");
  });
});
```

## Common Use Cases for Proxed

### Analytics Processing
```typescript
export const processUsageAnalytics = task({
  id: "process-usage-analytics",
  queue: { concurrencyLimit: 2 },
  run: async (payload: { projectId: string; startDate: string; endDate: string }) => {
    // Process API usage analytics
    const analytics = await calculateUsageMetrics(payload);
    await storeAnalytics(analytics);
    return analytics;
  },
});
```

### Email Notifications
```typescript
export const sendUsageAlert = task({
  id: "send-usage-alert",
  run: async (payload: { projectId: string; usage: number; limit: number }) => {
    if (payload.usage >= payload.limit * 0.9) {
      await sendEmailAlert({
        type: "usage-warning",
        projectId: payload.projectId,
        usage: payload.usage,
        limit: payload.limit,
      });
    }
  },
});
```

### Cleanup Tasks
```typescript
export const cleanupOldLogs = schedules.task({
  id: "cleanup-old-logs",
  cron: "0 2 * * *", // 2 AM daily
  run: async () => {
    const cutoffDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 days ago
    await deleteLogsBefore(cutoffDate);
  },
});
```