---
description:
globs:
alwaysApply: false
---
# Utils Package Implementation Rules

## Overview

The utils package provides shared utility functions, constants, and helper types used across all applications and packages.

## Core Utilities

- **Base URL helpers**
- **Pricing calculations**
- **Provider configurations**
- **Type utilities**
- **Common constants**

## Project Structure

```
packages/utils/
├── lib/
│   ├── __tests__/       # Test files
│   │   ├── partial-keys.test.ts
│   │   ├── pricing.test.ts
│   │   └── providers.test.ts
│   ├── base-url.ts      # URL helpers
│   ├── index.ts         # Main exports
│   ├── partial-keys.ts  # Type utilities
│   ├── pricing.ts       # Pricing logic
│   ├── providers.ts     # AI provider configs
│   └── timezones.ts     # Timezone utilities
├── index.ts             # Package entry
└── package.json
```

## Base URL Utilities

```typescript
// lib/base-url.ts

/**
 * Get the base URL for the current environment
 * Works in both server and client contexts
 */
export function getBaseUrl(): string {
  // Browser environment
  if (typeof window !== "undefined") {
    return window.location.origin;
  }

  // Server environment with Vercel URL
  if (process.env.VERCEL_URL) {
    return `https://${process.env.VERCEL_URL}`;
  }

  // Local development
  return `http://localhost:${process.env.PORT ?? 3000}`;
}

/**
 * Get API base URL
 */
export function getApiUrl(): string {
  if (process.env.NEXT_PUBLIC_API_URL) {
    return process.env.NEXT_PUBLIC_API_URL;
  }

  // Default to proxy endpoint
  return `${getBaseUrl()}/api/proxy`;
}

/**
 * Construct URL with query parameters
 */
export function buildUrl(
  base: string,
  params?: Record<string, string | number | boolean | undefined>
): string {
  const url = new URL(base, getBaseUrl());

  if (params) {
    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined) {
        url.searchParams.set(key, String(value));
      }
    });
  }

  return url.toString();
}
```

## Type Utilities

```typescript
// lib/partial-keys.ts

/**
 * Make specific keys of a type partial
 */
export type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

/**
 * Make specific keys of a type required
 */
export type RequiredKeys<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;

/**
 * Deep partial type
 */
export type DeepPartial<T> = T extends object ? {
  [P in keyof T]?: DeepPartial<T[P]>;
} : T;

/**
 * Extract non-nullable types
 */
export type NonNullableFields<T> = {
  [K in keyof T]-?: NonNullable<T[K]>;
};

/**
 * Make all properties mutable
 */
export type Mutable<T> = {
  -readonly [P in keyof T]: T[P];
};
```

## Pricing Calculations

```typescript
// lib/pricing.ts

export interface PricingTier {
  id: string;
  name: string;
  monthlyPrice: number;
  limits: {
    requests: number;
    projects: number;
    teamMembers: number;
  };
  features: string[];
}

export const PRICING_TIERS: Record<string, PricingTier> = {
  free: {
    id: "free",
    name: "Free",
    monthlyPrice: 0,
    limits: {
      requests: 10_000,
      projects: 1,
      teamMembers: 1,
    },
    features: [
      "10,000 requests/month",
      "1 project",
      "Community support",
    ],
  },
  pro: {
    id: "pro",
    name: "Pro",
    monthlyPrice: 29,
    limits: {
      requests: 100_000,
      projects: 10,
      teamMembers: 5,
    },
    features: [
      "100,000 requests/month",
      "10 projects",
      "5 team members",
      "Priority support",
      "Advanced analytics",
    ],
  },
  business: {
    id: "business",
    name: "Business",
    monthlyPrice: 99,
    limits: {
      requests: 1_000_000,
      projects: -1, // unlimited
      teamMembers: -1, // unlimited
    },
    features: [
      "1,000,000 requests/month",
      "Unlimited projects",
      "Unlimited team members",
      "24/7 support",
      "Custom integrations",
      "SLA guarantee",
    ],
  },
};

/**
 * Calculate price with proration
 */
export function calculateProration(
  currentTier: string,
  newTier: string,
  billingCycleStart: Date,
  upgradeDate: Date = new Date()
): {
  amount: number;
  description: string;
} {
  const current = PRICING_TIERS[currentTier];
  const next = PRICING_TIERS[newTier];

  if (!current || !next) {
    throw new Error("Invalid tier");
  }

  const cycleLength = 30; // days
  const daysRemaining = Math.ceil(
    (billingCycleStart.getTime() + cycleLength * 24 * 60 * 60 * 1000 - upgradeDate.getTime()) /
    (24 * 60 * 60 * 1000)
  );

  const currentDailyRate = current.monthlyPrice / cycleLength;
  const newDailyRate = next.monthlyPrice / cycleLength;

  const creditFromCurrent = currentDailyRate * daysRemaining;
  const chargeForNew = newDailyRate * daysRemaining;

  const amount = chargeForNew - creditFromCurrent;

  return {
    amount: Math.max(0, amount),
    description: `Proration for ${daysRemaining} days`,
  };
}

/**
 * Check if usage exceeds tier limits
 */
export function checkUsageLimits(
  tier: string,
  usage: {
    requests?: number;
    projects?: number;
    teamMembers?: number;
  }
): {
  exceeded: boolean;
  limits: Array<{
    resource: string;
    used: number;
    limit: number;
    percentage: number;
  }>;
} {
  const tierConfig = PRICING_TIERS[tier];
  if (!tierConfig) {
    throw new Error("Invalid tier");
  }

  const limits = [];
  let exceeded = false;

  // Check each limit
  const resources = [
    { key: "requests", name: "API Requests" },
    { key: "projects", name: "Projects" },
    { key: "teamMembers", name: "Team Members" },
  ] as const;

  for (const resource of resources) {
    const used = usage[resource.key] || 0;
    const limit = tierConfig.limits[resource.key];

    if (limit === -1) continue; // unlimited

    const percentage = (used / limit) * 100;

    limits.push({
      resource: resource.name,
      used,
      limit,
      percentage: Math.min(100, percentage),
    });

    if (used > limit) {
      exceeded = true;
    }
  }

  return { exceeded, limits };
}
```

## Provider Configurations

```typescript
// lib/providers.ts

export interface AIProvider {
  id: string;
  name: string;
  baseUrl: string;
  models: AIModel[];
  headers: (apiKey: string) => Record<string, string>;
}

export interface AIModel {
  id: string;
  name: string;
  contextWindow: number;
  maxOutput: number;
  pricing: {
    input: number; // per 1M tokens
    output: number; // per 1M tokens
  };
}

export const AI_PROVIDERS: Record<string, AIProvider> = {
  openai: {
    id: "openai",
    name: "OpenAI",
    baseUrl: "https://api.openai.com/v1",
    models: [
      {
        id: "gpt-4",
        name: "GPT-4",
        contextWindow: 8192,
        maxOutput: 4096,
        pricing: { input: 30, output: 60 },
      },
      {
        id: "gpt-4-turbo",
        name: "GPT-4 Turbo",
        contextWindow: 128000,
        maxOutput: 4096,
        pricing: { input: 10, output: 30 },
      },
      {
        id: "gpt-3.5-turbo",
        name: "GPT-3.5 Turbo",
        contextWindow: 16385,
        maxOutput: 4096,
        pricing: { input: 0.5, output: 1.5 },
      },
    ],
    headers: (apiKey: string) => ({
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json",
    }),
  },
  anthropic: {
    id: "anthropic",
    name: "Anthropic",
    baseUrl: "https://api.anthropic.com/v1",
    models: [
      {
        id: "claude-3-opus-20240229",
        name: "Claude 3 Opus",
        contextWindow: 200000,
        maxOutput: 4096,
        pricing: { input: 15, output: 75 },
      },
      {
        id: "claude-3-sonnet-20240229",
        name: "Claude 3 Sonnet",
        contextWindow: 200000,
        maxOutput: 4096,
        pricing: { input: 3, output: 15 },
      },
    ],
    headers: (apiKey: string) => ({
      "x-api-key": apiKey,
      "anthropic-version": "2023-06-01",
      "Content-Type": "application/json",
    }),
  },
};

/**
 * Get provider by model ID
 */
export function getProviderByModel(modelId: string): AIProvider | undefined {
  for (const provider of Object.values(AI_PROVIDERS)) {
    if (provider.models.some(m => m.id === modelId)) {
      return provider;
    }
  }
  return undefined;
}

/**
 * Calculate token cost
 */
export function calculateTokenCost(
  modelId: string,
  inputTokens: number,
  outputTokens: number
): number {
  const provider = getProviderByModel(modelId);
  if (!provider) return 0;

  const model = provider.models.find(m => m.id === modelId);
  if (!model) return 0;

  const inputCost = (inputTokens / 1_000_000) * model.pricing.input;
  const outputCost = (outputTokens / 1_000_000) * model.pricing.output;

  return inputCost + outputCost;
}
```

## Common Constants

```typescript
// lib/constants.ts

export const APP_NAME = "Proxed";
export const APP_DOMAIN = "proxed.com";

export const LIMITS = {
  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB
  MAX_TEAM_NAME_LENGTH: 50,
  MAX_PROJECT_NAME_LENGTH: 50,
  MAX_API_KEY_NAME_LENGTH: 50,
  MIN_PASSWORD_LENGTH: 8,
} as const;

export const TIMEOUTS = {
  API_REQUEST: 30_000, // 30s
  LONG_POLL: 60_000, // 60s
  CACHE_TTL: 60 * 5, // 5 minutes
} as const;

export const REGEX = {
  EMAIL: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
  SLUG: /^[a-z0-9]+(?:-[a-z0-9]+)*$/,
  UUID: /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
} as const;

export const ERROR_MESSAGES = {
  GENERIC: "An error occurred. Please try again.",
  UNAUTHORIZED: "You are not authorized to perform this action.",
  NOT_FOUND: "The requested resource was not found.",
  RATE_LIMITED: "Too many requests. Please try again later.",
} as const;
```

## Timezone Utilities

```typescript
// lib/timezones.ts

export interface Timezone {
  value: string;
  label: string;
  offset: string;
}

export const TIMEZONES: Timezone[] = [
  { value: "UTC", label: "UTC", offset: "+00:00" },
  { value: "America/New_York", label: "Eastern Time", offset: "-05:00" },
  { value: "America/Chicago", label: "Central Time", offset: "-06:00" },
  { value: "America/Denver", label: "Mountain Time", offset: "-07:00" },
  { value: "America/Los_Angeles", label: "Pacific Time", offset: "-08:00" },
  { value: "Europe/London", label: "London", offset: "+00:00" },
  { value: "Europe/Paris", label: "Paris", offset: "+01:00" },
  { value: "Asia/Tokyo", label: "Tokyo", offset: "+09:00" },
  // ... more timezones
];

/**
 * Get user's timezone
 */
export function getUserTimezone(): string {
  if (typeof window === "undefined") {
    return "UTC";
  }

  try {
    return Intl.DateTimeFormat().resolvedOptions().timeZone;
  } catch {
    return "UTC";
  }
}

/**
 * Format date in timezone
 */
export function formatInTimezone(
  date: Date | string,
  timezone: string,
  format: Intl.DateTimeFormatOptions = {}
): string {
  const d = typeof date === "string" ? new Date(date) : date;

  return d.toLocaleString("en-US", {
    timeZone: timezone,
    ...format,
  });
}
```

## Testing Patterns

```typescript
// __tests__/pricing.test.ts
import { describe, it, expect } from "bun:test";
import { calculateProration, checkUsageLimits } from "../pricing";

describe("Pricing Utils", () => {
  describe("calculateProration", () => {
    it("should calculate upgrade proration correctly", () => {
      const start = new Date("2024-01-01");
      const upgrade = new Date("2024-01-15");

      const result = calculateProration("free", "pro", start, upgrade);

      expect(result.amount).toBeGreaterThan(0);
      expect(result.description).toContain("15 days");
    });

    it("should return 0 for downgrade", () => {
      const start = new Date("2024-01-01");
      const upgrade = new Date("2024-01-15");

      const result = calculateProration("pro", "free", start, upgrade);

      expect(result.amount).toBe(0);
    });
  });

  describe("checkUsageLimits", () => {
    it("should detect exceeded limits", () => {
      const result = checkUsageLimits("free", {
        requests: 15_000,
        projects: 1,
      });

      expect(result.exceeded).toBe(true);
      expect(result.limits[0].percentage).toBe(100);
    });
  });
});
```

## Best Practices

1. **Keep utilities pure and testable**
2. **Use TypeScript for better type safety**
3. **Export constants as const assertions**
4. **Document complex functions with JSDoc**
5. **Group related utilities together**
6. **Write comprehensive tests for edge cases**

## Common Pitfalls

❌ Don't mutate input parameters
❌ Don't use side effects in utility functions
❌ Don't forget to handle edge cases
❌ Don't hardcode environment-specific values
❌ Don't create circular dependencies between utils
