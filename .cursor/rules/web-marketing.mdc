---
description:
globs:
alwaysApply: false
---
# Marketing Website Implementation Rules

## Core Technologies

- **Framework**: Next.js 15 App Router
- **UI**: React 19, Tailwind CSS, Shadcn UI
- **Animation**: Framer Motion, GSAP
- **Content**: MDX for blog/changelog
- **Analytics**: PostHog/Vercel Analytics
- **SEO**: Next.js metadata API

## Project Structure

```
apps/web/
├── src/
│   ├── app/
│   │   ├── (features)/       # Feature pages
│   │   ├── about/           # About pages
│   │   ├── changelog/       # Changelog
│   │   ├── updates/         # Blog/updates
│   │   ├── legal/           # Legal pages
│   │   ├── page.tsx         # Homepage
│   │   └── layout.tsx       # Root layout
│   ├── components/
│   │   ├── sections/        # Page sections
│   │   ├── ui/             # UI components
│   │   └── *.tsx           # Shared components
│   └── lib/                # Utilities
└── public/                 # Static assets
```

## Homepage Implementation

### Hero Section with Animation

```typescript
// components/sections/hero.tsx
'use client'

import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export function HeroSection() {
  return (
    <section className="relative min-h-screen flex items-center">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-to-b from-background via-background/80 to-background" />

      <div className="container relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="max-w-4xl mx-auto text-center"
        >
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="text-5xl md:text-7xl font-bold tracking-tight"
          >
            Build Better APIs
            <span className="text-gradient"> Faster</span>
          </motion.h1>

          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="mt-6 text-xl text-muted-foreground"
          >
            The modern API proxy that scales with your business
          </motion.p>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="mt-10 flex gap-4 justify-center"
          >
            <Button asChild size="lg">
              <Link href="/signup">Start Free Trial</Link>
            </Button>
            <Button asChild variant="outline" size="lg">
              <Link href="/docs">View Documentation</Link>
            </Button>
          </motion.div>
        </motion.div>
      </div>

      {/* Animated background elements */}
      <AnimatedBackground />
    </section>
  );
}
```

### Feature Grid with Scroll Animations

```typescript
// components/sections/features.tsx
'use client'

import { useRef } from "react";
import { motion, useInView } from "framer-motion";
import { Card } from "@/components/ui/card";

const features = [
  {
    title: "Lightning Fast",
    description: "Sub-millisecond latency with global edge deployment",
    icon: "⚡",
  },
  // ... more features
];

export function FeaturesSection() {
  const ref = useRef<HTMLElement>(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return (
    <section ref={ref} className="py-24">
      <div className="container">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.5 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl font-bold">Why Choose Proxed?</h2>
          <p className="mt-4 text-xl text-muted-foreground">
            Everything you need to build and scale modern APIs
          </p>
        </motion.div>

        <div className="grid md:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, y: 20 }}
              animate={isInView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <Card className="p-6 h-full hover:shadow-lg transition-shadow">
                <div className="text-4xl mb-4">{feature.icon}</div>
                <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
                <p className="text-muted-foreground">{feature.description}</p>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}
```

## Blog/Updates Implementation

### MDX Content Setup

```typescript
// lib/blog.ts
import fs from "fs";
import path from "path";
import matter from "gray-matter";
import { remark } from "remark";
import remarkMdx from "remark-mdx";

export interface Post {
  slug: string;
  title: string;
  date: string;
  excerpt: string;
  author: string;
  tags: string[];
  content: string;
}

export async function getPostBySlug(slug: string): Promise<Post> {
  const postsDirectory = path.join(process.cwd(), "content/posts");
  const fullPath = path.join(postsDirectory, `${slug}.mdx`);
  const fileContents = fs.readFileSync(fullPath, "utf8");

  const { data, content } = matter(fileContents);

  return {
    slug,
    content,
    title: data.title,
    date: data.date,
    excerpt: data.excerpt,
    author: data.author,
    tags: data.tags || [],
  };
}

export async function getAllPosts(): Promise<Post[]> {
  const postsDirectory = path.join(process.cwd(), "content/posts");
  const filenames = fs.readdirSync(postsDirectory);

  const posts = await Promise.all(
    filenames
      .filter((filename) => filename.endsWith(".mdx"))
      .map(async (filename) => {
        const slug = filename.replace(/\.mdx$/, "");
        return getPostBySlug(slug);
      })
  );

  return posts.sort((a, b) =>
    new Date(b.date).getTime() - new Date(a.date).getTime()
  );
}
```

### Blog Post Page

```typescript
// app/updates/[slug]/page.tsx
import { MDXRemote } from "next-mdx-remote/rsc";
import { getPostBySlug, getAllPosts } from "@/lib/blog";
import { components } from "@/components/mdx-components";
import { formatDate } from "@/lib/utils";

export async function generateStaticParams() {
  const posts = await getAllPosts();
  return posts.map((post) => ({
    slug: post.slug,
  }));
}

export async function generateMetadata({ params }: { params: { slug: string } }) {
  const post = await getPostBySlug(params.slug);

  return {
    title: post.title,
    description: post.excerpt,
    openGraph: {
      title: post.title,
      description: post.excerpt,
      type: "article",
      publishedTime: post.date,
      authors: [post.author],
    },
  };
}

export default async function BlogPost({ params }: { params: { slug: string } }) {
  const post = await getPostBySlug(params.slug);

  return (
    <article className="max-w-4xl mx-auto px-4 py-16">
      <header className="mb-8">
        <h1 className="text-4xl font-bold mb-4">{post.title}</h1>
        <div className="flex items-center gap-4 text-muted-foreground">
          <time dateTime={post.date}>{formatDate(post.date)}</time>
          <span>•</span>
          <span>{post.author}</span>
        </div>
        <div className="flex gap-2 mt-4">
          {post.tags.map((tag) => (
            <span
              key={tag}
              className="px-3 py-1 bg-secondary text-secondary-foreground rounded-full text-sm"
            >
              {tag}
            </span>
          ))}
        </div>
      </header>

      <div className="prose prose-neutral dark:prose-invert max-w-none">
        <MDXRemote source={post.content} components={components} />
      </div>
    </article>
  );
}
```

## Changelog Implementation

```typescript
// app/changelog/page.tsx
import { getChangelogs } from "@/lib/changelog";
import { ChangelogEntry } from "@/components/changelog-entry";

export const metadata = {
  title: "Changelog",
  description: "See what's new in Proxed",
};

export default async function ChangelogPage() {
  const changelogs = await getChangelogs();

  return (
    <div className="max-w-4xl mx-auto px-4 py-16">
      <h1 className="text-4xl font-bold mb-8">Changelog</h1>
      <p className="text-xl text-muted-foreground mb-12">
        All the latest updates, improvements, and fixes to Proxed.
      </p>

      <div className="space-y-16">
        {changelogs.map((entry, index) => (
          <ChangelogEntry
            key={entry.version}
            entry={entry}
            index={index}
          />
        ))}
      </div>
    </div>
  );
}
```

## SEO & Metadata

### Dynamic Metadata

```typescript
// app/layout.tsx
import { Metadata } from "next";

export const metadata: Metadata = {
  metadataBase: new URL("https://proxed.com"),
  title: {
    default: "Proxed - Modern API Proxy Platform",
    template: "%s | Proxed",
  },
  description: "The modern API proxy that scales with your business. Built for developers, trusted by enterprises.",
  keywords: ["api proxy", "api gateway", "api management", "developer tools"],
  authors: [{ name: "Proxed Team" }],
  creator: "Proxed",
  openGraph: {
    type: "website",
    locale: "en_US",
    url: "https://proxed.com",
    siteName: "Proxed",
    images: [
      {
        url: "/og-image.png",
        width: 1200,
        height: 630,
        alt: "Proxed - Modern API Proxy Platform",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "Proxed - Modern API Proxy Platform",
    description: "The modern API proxy that scales with your business",
    images: ["/og-image.png"],
    creator: "@proxed",
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },
};
```

### Structured Data

```typescript
// components/structured-data.tsx
export function OrganizationStructuredData() {
  const structuredData = {
    "@context": "https://schema.org",
    "@type": "Organization",
    name: "Proxed",
    url: "https://proxed.com",
    logo: "https://proxed.com/logo.png",
    sameAs: [
      "https://twitter.com/proxed",
      "https://github.com/proxed",
      "https://linkedin.com/company/proxed",
    ],
  };

  return (
    <script
      type="application/ld+json"
      dangerouslySetInnerHTML={{ __html: JSON.stringify(structuredData) }}
    />
  );
}
```

## Performance Optimizations

### Image Optimization

```typescript
// components/optimized-image.tsx
import Image from "next/image";

export function OptimizedImage({
  src,
  alt,
  priority = false,
  ...props
}: {
  src: string;
  alt: string;
  priority?: boolean;
  width: number;
  height: number;
}) {
  return (
    <Image
      src={src}
      alt={alt}
      priority={priority}
      placeholder="blur"
      blurDataURL={`/_next/image?url=${src}&w=16&q=1`}
      quality={90}
      {...props}
    />
  );
}
```

### Font Optimization

```typescript
// app/layout.tsx
import { Inter } from "next/font/google";
import localFont from "next/font/local";

const inter = Inter({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-inter",
});

const calSans = localFont({
  src: "../public/fonts/CalSans-SemiBold.woff2",
  display: "swap",
  variable: "--font-cal",
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className={`${inter.variable} ${calSans.variable}`}>
      <body>{children}</body>
    </html>
  );
}
```

## Animation Patterns

### Scroll-triggered Animations

```typescript
// hooks/use-scroll-animation.ts
import { useScroll, useTransform } from "framer-motion";
import { RefObject } from "react";

export function useScrollAnimation(ref: RefObject<HTMLElement>) {
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ["start end", "end start"],
  });

  const opacity = useTransform(scrollYProgress, [0, 0.5, 1], [0, 1, 0]);
  const y = useTransform(scrollYProgress, [0, 0.5, 1], [100, 0, -100]);

  return { opacity, y };
}
```

### Page Transitions

```typescript
// components/page-transition.tsx
'use client'

import { motion, AnimatePresence } from "framer-motion";
import { usePathname } from "next/navigation";

export function PageTransition({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();

  return (
    <AnimatePresence mode="wait">
      <motion.div
        key={pathname}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3 }}
      >
        {children}
      </motion.div>
    </AnimatePresence>
  );
}
```

## Common Components

### Newsletter Signup

```typescript
// components/newsletter-form.tsx
'use client'

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { subscribeToNewsletter } from "@/actions/newsletter";
import { toast } from "sonner";

export function NewsletterForm() {
  const [email, setEmail] = useState("");
  const [loading, setLoading] = useState(false);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setLoading(true);

    try {
      await subscribeToNewsletter(email);
      toast.success("Thanks for subscribing!");
      setEmail("");
    } catch (error) {
      toast.error("Failed to subscribe. Please try again.");
    } finally {
      setLoading(false);
    }
  }

  return (
    <form onSubmit={handleSubmit} className="flex gap-2">
      <Input
        type="email"
        placeholder="Enter your email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
        className="flex-1"
      />
      <Button type="submit" disabled={loading}>
        {loading ? "Subscribing..." : "Subscribe"}
      </Button>
    </form>
  );
}
```

## Performance Best Practices

1. **Use static generation for all marketing pages**
2. **Implement proper image optimization with next/image**
3. **Lazy load heavy components and animations**
4. **Use font subsetting and display swap**
5. **Minimize JavaScript bundle with dynamic imports**
6. **Implement proper caching headers**

## SEO Best Practices

1. **Use semantic HTML structure**
2. **Implement proper meta tags and Open Graph**
3. **Add structured data for rich snippets**
4. **Create XML sitemap and robots.txt**
5. **Optimize Core Web Vitals**
6. **Implement proper heading hierarchy**

## Common Pitfalls

❌ Don't overuse animations - they should enhance, not distract
❌ Don't forget to optimize images and fonts
❌ Don't skip meta tags and structured data
❌ Don't use client components for static content
❌ Don't forget accessibility (ARIA labels, keyboard navigation)
