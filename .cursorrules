You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Next.js Specifics
- Use next-safe-action for all server actions:
- Implement type-safe server actions with proper validation.
- Utilize the `action` function from next-safe-action for creating actions.
- Define input schemas using Zod for robust type checking and validation.
- Handle errors gracefully and return appropriate responses.
- Use import type { ActionResponse } from '@/types/actions'
- Ensure all server actions return the ActionResponse type
- Implement consistent error handling and success responses using ActionResponse
- Example:
  ```typescript
  'use server'

  import { createSafeActionClient } from 'next-safe-action'
  import { z } from 'zod'
  import type { ActionResponse } from '@/app/actions/actions'

  const schema = z.object({
    value: z.string()
  })

  export const someAction = createSafeActionClient()
    .schema(schema)
    .action(async (input): Promise<ActionResponse> => {
      try {
        // Action logic here
        return { success: true, data: /* result */ }
      } catch (error) {
        return { success: false, error: error instanceof AppError ? error : appErrors.UNEXPECTED_ERROR, }
      }
    })
  ```
- Use useQueryState for all query state management.
- Example:
  ```typescript
  'use client'

  import { useQueryState } from 'nuqs'

  export function Demo() {
    const [name, setName] = useQueryState('name')
    return (
      <>
        <input value={name || ''} onChange={e => setName(e.target.value)} />
        <button onClick={() => setName(null)}>Clear</button>
        <p>Hello, {name || 'anonymous visitor'}!</p>
      </>
    )
  }
  ```
  - Nuqs search-params.ts for serverside query management
  - Example:
  ```typescript
    import {
    createSearchParamsCache,
    parseAsInteger,
    parseAsStringLiteral,
  } from "nuqs/server";

  export const searchParamsCache = createSearchParamsCache({
    type: parseAsStringLiteral([
      "one",
      "two",
    ] as const),
    page: parseAsInteger.withDefault(1),
    perPage: parseAsInteger.withDefault(25),
  });
  ```

Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Follow Next.js docs for Data Fetching, Rendering, and Routing.

SQL and Supabase Standards:
- Table and Column Naming:
  - Use snake_case for all identifiers
  - Use plural for table names (users, posts, teams)
  - Use singular for column names (user_id, post_id)
  - Prefix foreign keys with referenced table name (user_id, team_id)
  - Use timestamptz for all timestamp fields
  - Name primary keys as 'id'

- Schema Organization:
  - Place all tables in public schema
  - Place helper functions in public schema
  - Use ENUM types for fixed sets of values
  - Define constraints inline with table creation
  - Group related tables and functions together

- Data Types and Constraints:
  - Use uuid for primary and foreign keys
  - Use text instead of varchar
  - Add NOT NULL constraint where appropriate
  - Include created_at and updated_at timestamps
  - Use gen_random_uuid() for UUID generation
  - Add appropriate unique constraints
  - Define CHECK constraints inline

- Indexes:
  - Name indexes with pattern: idx_[table]_[column(s)]
  - Create indexes for foreign keys
  - Create indexes for frequently queried columns
  - Add composite indexes for common query patterns

- Row Level Security (RLS):
  - Enable RLS on all tables
  - Use full path for fields (public.table_name.column)
  - Create explicit policies for all operations
  - Name policies descriptively: "allow [operation] for [role/condition]"
  - Use security definer for helper functions
  - Implement separate policies for SELECT, INSERT, UPDATE, DELETE

- Triggers and Functions:
  - Use before triggers for data modifications
  - Name triggers as [table]_[event]_[action]
  - Create reusable helper functions for common checks
  - Use security definer when accessing auth.uid()
  - Implement updated_at triggers for all tables

- Foreign Keys:
  - Always specify ON DELETE behavior
  - Use CASCADE for parent-child relationships
  - Reference tables using public schema prefix

- Migration Standards:
  - Order operations logically:
    1. Types and enums
    2. Tables
    3. Functions
    4. RLS
    5. Policies
    6. Indexes
    7. Triggers
  - Include rollback logic where necessary
  - Use explicit schema references
  - Group related changes in single migration

- Security Best Practices:
  - Never trust client input
  - Use parameterized queries
  - Implement proper access control
  - Validate data at database level
  - Use security definer judiciously
  - Always enable RLS
  - Audit sensitive operations

- Performance Considerations:
  - Create appropriate indexes
  - Use efficient data types
  - Implement proper constraints
  - Consider query patterns
  - Use materialized views for complex queries
  - Monitor and optimize slow queries
