
# Shared Package Patterns

## Package Structure

The packages directory contains reusable modules shared across the monorepo:

- **Analytics**: `@proxed/analytics` - Analytics package for logging events with OpenPanel.
- **Jobs**: `@proxed/jobs` - Background jobs package using Trigger.dev for tasks like notifications.
- **KV**: `@proxed/kv` - Key-value storage utilities using Upstash Redis.
- **Location**: `@proxed/location` - Location and country utilities for IP-based geolocation.
- **Logger**: `@proxed/logger` - Logging utilities using Pino.
- **Mail**: `@proxed/mail` - Email sending functionality with React Email templates and providers.
- **Notifications**: `@proxed/notifications` - Notification workflows and utilities using Novu.
- **Structure**: `@proxed/structure` - Code structure parser and generator.
- **Supabase**: `@proxed/supabase` - Supabase client and utilities for database interactions.
- **UI**: `@proxed/ui` - Shared UI components based on Shadcn UI.
- **Utils**: `@proxed/utils` - Common utility functions, constants, and types.

## Package Conventions
Each package follows a consistent structure:

```
package-name/
├── src/
│   ├── index.ts          # Main export file
│   ├── components/       # Components (if applicable)
│   └── utils/           # Utility functions
├── package.json         # Package configuration
├── tsconfig.json        # TypeScript configuration
└── README.md           # Documentation
```

## Development Guidelines
- **Export Everything**: Use `src/index.ts` as the main export file
- **TypeScript First**: All packages use TypeScript
- **Minimal Dependencies**: Keep dependencies to a minimum
- **Tree Shaking**: Structure exports for optimal tree shaking
- **Documentation**: Include README.md with usage examples

## Import/Export Patterns
```typescript
// Main export file (src/index.ts)
export * from './components';
export * from './utils';
export { default as SomeComponent } from './components/SomeComponent';

// Package imports in applications
import { SomeComponent, someUtility } from '@se/package-name';
```

## TypeScript Configuration
- Extend base TypeScript config from `@midday/tsconfig`
- Use consistent compiler options across packages
- Include proper type exports for consumers

## Testing
- Co-locate tests with source files
- Use consistent testing framework across packages
- Include unit tests for utility functions
- Test components in isolation

## Package.json Best Practices
- Use workspace protocol for internal dependencies
- Include proper exports field for Node.js compatibility
- Set appropriate peer dependencies
- Include build scripts for compiled packages
